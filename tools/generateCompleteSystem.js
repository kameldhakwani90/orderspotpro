const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ D√âMARRAGE - G√©n√©ration SYST√àME COMPLET 100% DYNAMIQUE');

function validateSourceFiles() {
  console.log('üîç Validation des fichiers source...');
  
  const requiredFiles = [
    { path: 'src/lib/types.ts', description: 'Interfaces TypeScript' },
    { path: 'src/lib/data.ts', description: 'Donn√©es de test' }
  ];
  
  let allValid = true;
  
  requiredFiles.forEach(file => {
    const fullPath = path.join(__dirname, '..', file.path);
    if (!fs.existsSync(fullPath)) {
      console.error(`‚ùå Fichier manquant: ${file.path} (${file.description})`);
      allValid = false;
    } else {
      console.log(`‚úÖ ${file.path}`);
    }
  });
  
  if (!allValid) {
    console.error('‚ùå Fichiers source manquants - Arr√™t du processus');
    process.exit(1);
  }
  
  console.log('‚úÖ Tous les fichiers source sont pr√©sents');
}

function runScript(scriptName, description) {
  console.log(`\nüîß ${description}...`);
  
  const scriptPath = path.join(__dirname, scriptName);
  
  if (!fs.existsSync(scriptPath)) {
    console.error(`‚ùå Script manquant: ${scriptName}`);
    process.exit(1);
  }
  
  try {
    execSync(`node ${scriptPath}`, { 
      stdio: 'inherit',
      cwd: __dirname 
    });
    console.log(`‚úÖ ${description} termin√©`);
  } catch (error) {
    console.error(`‚ùå Erreur pendant : ${description}`);
    console.error(`Script: ${scriptName}`);
    console.error(`Code d'erreur: ${error.status}`);
    process.exit(1);
  }
}

function createMissingDirectories() {
  console.log('üìÅ Cr√©ation des r√©pertoires n√©cessaires...');
  
  const directories = [
    'prisma',
    'src/app/api',
    'src/context',
    'src/hooks',
    'src/lib'
  ];
  
  directories.forEach(dir => {
    const fullPath = path.join(__dirname, '..', dir);
    if (!fs.existsSync(fullPath)) {
      fs.mkdirSync(fullPath, { recursive: true });
      console.log(`  üìÅ Cr√©√©: ${dir}`);
    }
  });
}

function setupEnvironmentVariables() {
  console.log('üîß Configuration des variables d\'environnement...');
  
  const envPath = path.join(__dirname, '..', '.env');
  
  let envContent = '';
  
  // Ajouter DATABASE_URL si pas pr√©sent
  if (!fs.existsSync(envPath) || !fs.readFileSync(envPath, 'utf-8').includes('DATABASE_URL')) {
    envContent += '\n# Base de donn√©es PostgreSQL\n';
    envContent += 'DATABASE_URL="postgresql://orderspot_user:orderspot_pass@orderspot_postgres:5432/orderspot_db?schema=public"\n';
  }
  
  // Cr√©er .env s'il n'existe pas
  if (!fs.existsSync(envPath)) {
    fs.writeFileSync(envPath, envContent, 'utf-8');
    console.log('‚úÖ Fichier .env cr√©√©');
  } else {
    console.log('‚è≠Ô∏è  Fichier .env existe d√©j√†');
  }
}


// EX√âCUTION PRINCIPALE
try {
  console.log('============================================================');
  console.log('üöÄ G√âN√âRATION SYST√àME COMPLET - 100% DYNAMIQUE');
  console.log('============================================================');
  
  // PHASE 0 - Pr√©paration
  validateSourceFiles();
  createMissingDirectories();
  setupEnvironmentVariables();
  
  console.log('\nüìã Plan d\'ex√©cution:');
  console.log('  1. G√©n√©ration schema Prisma (dynamique)');
  console.log('  2. G√©n√©ration service Prisma CRUD complet (dynamique)');
  console.log('  3. G√©n√©ration routes API (dynamique)');
  console.log('  4. Migration authentification vers API');
  console.log('  5. G√©n√©ration hooks React (dynamique)');
  console.log('  6. Migration composants vers hooks');
  console.log('  7. Migration data vers prisma-service');
  console.log('  8. Correction erreurs TypeScript\n');
  
  // PHASE 1 - G√©n√©ration Prisma
  runScript('generatePrismaSchema.js', 'G√©n√©ration schema Prisma DYNAMIQUE');
  runScript('generatePrismaServiceFromData.js', 'G√©n√©ration service Prisma CRUD COMPLET');
  
  // PHASE 2 - G√©n√©ration API
  runScript('generateApiRoutes.js', 'G√©n√©ration routes API DYNAMIQUES');
  
  // PHASE 3 - Migration Auth
  if (!fs.existsSync(path.join(__dirname, 'migrateAuthToApi.js'))) {
    createAuthMigrationScript();
  }
  runScript('migrateAuthToApi.js', 'Migration authentification vers API');
  
  // PHASE 4 - Hooks et Components
  runScript('generateReactHooks.js', 'G√©n√©ration hooks React DYNAMIQUES');
  runScript('migrateComponentsToHooks.js', 'Migration composants vers hooks');
  
  // PHASE 5 - Migration donn√©es
  runScript('migrateDataToPrisma.js', 'Migration imports data vers prisma-service');
  
  // PHASE 6 - Validation
  console.log('\nüîç Validation du syst√®me g√©n√©r√©...');
  
  const criticalFiles = [
    'prisma/schema.prisma',
    'src/lib/prisma-service.ts',
    'src/app/api/users/route.ts',
    'src/app/api/auth/route.ts'
  ];
  
  let allGenerated = true;
  criticalFiles.forEach(file => {
    const fullPath = path.join(__dirname, '..', file);
    if (fs.existsSync(fullPath)) {
      console.log(`‚úÖ ${file}`);
      
      // V√©rification sp√©ciale pour prisma-service.ts
      if (file === 'src/lib/prisma-service.ts') {
        const content = fs.readFileSync(fullPath, 'utf-8');
        const hasUpdateHost = content.includes('updateHost');
        const hasDeleteHost = content.includes('deleteHost');
        console.log(`  üìä updateHost: ${hasUpdateHost ? '‚úÖ' : '‚ùå'}`);
        console.log(`  üìä deleteHost: ${hasDeleteHost ? '‚úÖ' : '‚ùå'}`);
      }
    } else {
      console.error(`‚ùå Manquant: ${file}`);
      allGenerated = false;
    }
  });
  
  if (!allGenerated) {
    console.error('‚ùå Certains fichiers n\'ont pas √©t√© g√©n√©r√©s correctement');
    process.exit(1);
  }
  
  // PHASE 7 - Correction TypeScript
  console.log('\nüîß Correction des erreurs TypeScript...');
  if (!fs.existsSync(path.join(__dirname, 'fixTypescriptErrors.js'))) {
    createTypescriptFixScript();
  }
  runScript('fixTypescriptErrors.js', 'Correction erreurs TypeScript');
  
  console.log('\n============================================================');
  console.log('üéâ SYST√àME COMPLET G√âN√âR√â AVEC SUCC√àS !');
  console.log('============================================================');
  
  console.log('\nüìä R√©sum√© de la g√©n√©ration:');
  console.log('‚úÖ Schema Prisma g√©n√©r√© DYNAMIQUEMENT depuis types.ts');
  console.log('‚úÖ Service Prisma avec CRUD COMPLET pour tous les mod√®les');
  console.log('‚úÖ Routes API Next.js pour tous les mod√®les d√©tect√©s');
  console.log('‚úÖ Authentification migr√©e vers API');
  console.log('‚úÖ Hooks React g√©n√©r√©s pour tous les mod√®les');
  console.log('‚úÖ Composants migr√©s vers hooks automatiquement');
  console.log('‚úÖ Imports data.ts migr√©s vers prisma-service.ts');
  console.log('‚úÖ Erreurs TypeScript corrig√©es automatiquement');
  console.log('‚úÖ Service Prisma maintenu dans /src/lib/ (pas de conflit)');
  
  console.log('\nüî• CRUD COMPLET G√âN√âR√â:');
  console.log('   - get[Model]ById() pour tous les mod√®les');
  console.log('   - getAll[Model]s() pour tous les mod√®les');
  console.log('   - create[Model]() pour tous les mod√®les');
  console.log('   - update[Model]() pour tous les mod√®les ‚Üê NOUVEAU');
  console.log('   - delete[Model]() pour tous les mod√®les ‚Üê NOUVEAU');
  
} catch (error) {
  console.error('\n‚ùå ERREUR CRITIQUE dans generateCompleteSystem:');
  console.error(`Message: ${error.message}`);
  console.error(`Stack: ${error.stack}`);
  process.exit(1);
}
