#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const { ClaudeAPI } = require('./ai-infrastructure.js');

/**
 * üß† INTELLIGENT DOCUMENTER
 * G√©n√©ration et maintenance automatique de documentation avec IA
 */
class IntelligentDocumenter {
  constructor() {
    this.claudeAPI = new ClaudeAPI();
    this.projectRoot = process.cwd();
    this.docsDir = path.join(this.projectRoot, 'docs');
    this.documentationMetrics = {
      startTime: Date.now(),
      filesDocumented: 0,
      jsdocGenerated: 0,
      readmeUpdated: false,
      apiDocsGenerated: 0,
      guidesCreated: 0,
      typesDocumented: 0
    };
    
    // Configuration documentation
    this.docConfig = this.loadDocumentationConfig();
    
    // Chargement analyse projet
    this.projectAnalysis = this.loadProjectAnalysis();
    
    // Templates documentation
    this.templates = this.loadDocumentationTemplates();
  }

  /**
   * üéØ DOCUMENTATION INTELLIGENTE COMPL√àTE
   */
  async generateIntelligentDocumentation() {
    console.log('üìö D√©marrage Intelligent Documenter...');
    
    try {
      // 1. Analyse code pour documentation
      const codeAnalysis = await this.analyzeCodeForDocumentation();
      
      // 2. G√©n√©ration JSDoc automatique
      await this.generateJSDocumentation(codeAnalysis);
      
      // 3. G√©n√©ration README intelligent
      await this.generateIntelligentReadme(codeAnalysis);
      
      // 4. Documentation API interactive
      await this.generateApiDocumentation(codeAnalysis);
      
      // 5. Guides utilisateur automatiques
      await this.generateUserGuides(codeAnalysis);
      
      // 6. Documentation TypeScript
      await this.generateTypeDocumentation(codeAnalysis);
      
      // 7. Documentation composants
      await this.generateComponentDocumentation(codeAnalysis);
      
      // 8. G√©n√©ration site documentation
      await this.generateDocumentationSite();
      
      // 9. Setup auto-update sur changements
      await this.setupAutoUpdate();
      
      // 10. Rapport final
      this.generateDocumentationReport(codeAnalysis);
      
      console.log('‚úÖ Documentation intelligente termin√©e !');
      return true;
      
    } catch (error) {
      console.error('‚ùå Erreur Intelligent Documenter:', error.message);
      throw error;
    }
  }

  /**
   * üîç ANALYSE CODE POUR DOCUMENTATION
   */
  async analyzeCodeForDocumentation() {
    console.log('  üîç Analyse code pour documentation...');
    
    const analysis = {
      components: [],
      hooks: [],
      utilities: [],
      apiRoutes: [],
      types: [],
      architecture: {},
      dependencies: {},
      features: []
    };
    
    // Analyse composants React
    analysis.components = await this.analyzeComponentsForDocs();
    
    // Analyse hooks personnalis√©s
    analysis.hooks = await this.analyzeHooksForDocs();
    
    // Analyse fonctions utilitaires
    analysis.utilities = await this.analyzeUtilitiesForDocs();
    
    // Analyse routes API
    analysis.apiRoutes = await this.analyzeApiRoutesForDocs();
    
    // Analyse types TypeScript
    analysis.types = await this.analyzeTypesForDocs();
    
    // Architecture g√©n√©rale
    analysis.architecture = await this.analyzeArchitectureForDocs();
    
    // D√©pendances importantes
    analysis.dependencies = await this.analyzeDependenciesForDocs();
    
    // Features principales
    analysis.features = await this.extractProjectFeatures(analysis);
    
    console.log(`    ‚úì ${analysis.components.length} composants analys√©s`);
    console.log(`    ‚úì ${analysis.hooks.length} hooks analys√©s`);
    console.log(`    ‚úì ${analysis.apiRoutes.length} routes API analys√©es`);
    console.log(`    ‚úì ${analysis.types.length} types document√©s`);
    
    return analysis;
  }

  /**
   * üìù G√âN√âRATION JSDOC AUTOMATIQUE
   */
  async generateJSDocumentation(codeAnalysis) {
    console.log('  üìù G√©n√©ration JSDoc automatique...');
    
    // Documentation des composants
    for (const component of codeAnalysis.components) {
      await this.addJSDocToComponent(component);
    }
    
    // Documentation des hooks
    for (const hook of codeAnalysis.hooks) {
      await this.addJSDocToHook(hook);
    }
    
    // Documentation des utilitaires
    for (const utility of codeAnalysis.utilities) {
      await this.addJSDocToUtility(utility);
    }
    
    // Documentation des routes API
    for (const route of codeAnalysis.apiRoutes) {
      await this.addJSDocToApiRoute(route);
    }
    
    console.log(`    ‚úì ${this.documentationMetrics.jsdocGenerated} JSDoc g√©n√©r√©s`);
  }

  /**
   * ‚öõÔ∏è AJOUT JSDOC COMPOSANT
   */
  async addJSDocToComponent(component) {
    const jsdocPrompt = `
G√©n√®re une documentation JSDoc compl√®te pour ce composant React :

COMPOSANT:
${JSON.stringify(component, null, 2)}

CODE:
${component.code.substring(0, 3000)}

G√©n√®re JSDoc avec :
1. Description du composant et son r√¥le
2. Documentation des props (types, required, defaults)
3. Exemples d'utilisation
4. Notes sur l'accessibilit√©
5. Informations de performance
6. Tags @since, @example, @param

Retourne le code avec JSDoc int√©gr√©, pr√©servant le code existant.
`;

    try {
      const documentedCode = await this.claudeAPI.generateWithCache(
        `jsdoc-component-${component.name}`,
        jsdocPrompt,
        'Tu g√©n√®res de la documentation JSDoc professionnelle et compl√®te pour les composants React'
      );

      // Sauvegarde du composant document√©
      const backupPath = component.filePath + '.backup';
      fs.copyFileSync(component.filePath, backupPath);
      
      fs.writeFileSync(component.filePath, documentedCode);
      this.documentationMetrics.jsdocGenerated++;
      this.documentationMetrics.filesDocumented++;

      console.log(`    üìù JSDoc ajout√©: ${component.name}`);

    } catch (error) {
      console.warn(`    ‚ö†Ô∏è Erreur JSDoc ${component.name}: ${error.message}`);
    }
  }

  /**
   * üìñ G√âN√âRATION README INTELLIGENT
   */
  async generateIntelligentReadme(codeAnalysis) {
    console.log('  üìñ G√©n√©ration README intelligent...');
    
    const readmePrompt = `
G√©n√®re un README.md professionnel et complet pour ce projet :

ANALYSE PROJET:
${JSON.stringify(codeAnalysis, null, 2)}

ARCHITECTURE:
${JSON.stringify(this.projectAnalysis?.architecture || {}, null, 2)}

FEATURES PRINCIPALES:
${JSON.stringify(codeAnalysis.features, null, 2)}

G√©n√®re README avec :
1. Description projet et objectifs
2. Features principales avec screenshots/GIFs
3. Installation et configuration
4. Guide de d√©marrage rapide
5. Architecture et structure
6. API documentation links
7. Contributing guidelines
8. License et credits
9. Badges de statut (build, coverage, version)
10. Roadmap et TODO

Markdown professionnel avec √©mojis et sections bien organis√©es.
`;

    try {
      const readmeContent = await this.claudeAPI.generateWithCache(
        'intelligent-readme',
        readmePrompt,
        'Tu g√©n√®res des README.md professionnels et attractifs pour des projets de d√©veloppement'
      );

      const readmePath = path.join(this.projectRoot, 'README.md');
      
      // Backup du README existant
      if (fs.existsSync(readmePath)) {
        const backupPath = readmePath + '.backup.' + Date.now();
        fs.copyFileSync(readmePath, backupPath);
      }
      
      fs.writeFileSync(readmePath, readmeContent);
      this.documentationMetrics.readmeUpdated = true;

      console.log('    ‚úÖ README.md g√©n√©r√©');

    } catch (error) {
      console.warn('    ‚ö†Ô∏è Erreur g√©n√©ration README:', error.message);
    }
  }

  /**
   * üåê DOCUMENTATION API INTERACTIVE
   */
  async generateApiDocumentation(codeAnalysis) {
    console.log('  üåê G√©n√©ration documentation API...');
    
    if (codeAnalysis.apiRoutes.length === 0) {
      console.log('    ‚ÑπÔ∏è Aucune route API d√©tect√©e');
      return;
    }
    
    // G√©n√©ration OpenAPI/Swagger
    await this.generateOpenApiSpec(codeAnalysis.apiRoutes);
    
    // Documentation interactive
    await this.generateInteractiveApiDocs(codeAnalysis.apiRoutes);
    
    // Examples et testing
    await this.generateApiExamples(codeAnalysis.apiRoutes);
    
    this.documentationMetrics.apiDocsGenerated = codeAnalysis.apiRoutes.length;
    console.log(`    ‚úÖ ${this.documentationMetrics.apiDocsGenerated} APIs document√©es`);
  }

  /**
   * üìã G√âN√âRATION GUIDES UTILISATEUR
   */
  async generateUserGuides(codeAnalysis) {
    console.log('  üìã G√©n√©ration guides utilisateur...');
    
    const guides = [];
    
    // Guide installation
    guides.push(await this.generateInstallationGuide(codeAnalysis));
    
    // Guide d√©veloppement
    guides.push(await this.generateDevelopmentGuide(codeAnalysis));
    
    // Guide d√©ploiement
    guides.push(await this.generateDeploymentGuide(codeAnalysis));
    
    // Guide architecture
    guides.push(await this.generateArchitectureGuide(codeAnalysis));
    
    // Guide contribution
    guides.push(await this.generateContributingGuide(codeAnalysis));
    
    this.documentationMetrics.guidesCreated = guides.filter(g => g).length;
    console.log(`    ‚úÖ ${this.documentationMetrics.guidesCreated} guides cr√©√©s`);
  }

  /**
   * üìò G√âN√âRATION GUIDE INSTALLATION
   */
  async generateInstallationGuide(codeAnalysis) {
    const installGuidePrompt = `
G√©n√®re un guide d'installation complet pour ce projet :

TECHNOLOGIES D√âTECT√âES:
${JSON.stringify(codeAnalysis.dependencies, null, 2)}

ARCHITECTURE:
${JSON.stringify(codeAnalysis.architecture, null, 2)}

G√©n√®re guide avec :
1. Pr√©requis syst√®me (Node.js, base de donn√©es, etc.)
2. Installation d√©pendances
3. Configuration environnement
4. Setup base de donn√©es
5. Configuration variables d'environnement
6. Premier d√©marrage
7. V√©rification installation
8. Troubleshooting courant

Markdown clair avec commandes √† copier-coller.
`;

    try {
      const guideContent = await this.claudeAPI.generateWithCache(
        'installation-guide',
        installGuidePrompt,
        'Tu g√©n√®res des guides d\'installation clairs et complets pour des projets de d√©veloppement'
      );

      const guidePath = path.join(this.docsDir, 'installation.md');
      this.ensureDirectoryExists(this.docsDir);
      fs.writeFileSync(guidePath, guideContent);

      console.log('    üìò Guide installation cr√©√©');
      return true;

    } catch (error) {
      console.warn('    ‚ö†Ô∏è Erreur guide installation:', error.message);
      return false;
    }
  }

  /**
   * üèóÔ∏è G√âN√âRATION SITE DOCUMENTATION
   */
  async generateDocumentationSite() {
    console.log('  üèóÔ∏è G√©n√©ration site documentation...');
    
    // Configuration Docusaurus ou VitePress
    await this.createDocusaurusConfig();
    
    // Structure navigation
    await this.generateNavigationStructure();
    
    // Page d'accueil
    await this.generateHomePage();
    
    // Configuration d√©ploiement
    await this.generateDeploymentConfig();
    
    console.log('    ‚úÖ Site documentation configur√©');
  }

  /**
   * üîÑ SETUP AUTO-UPDATE
   */
  async setupAutoUpdate() {
    console.log('  üîÑ Configuration auto-update...');
    
    // Git hooks pour documentation
    await this.createGitHooks();
    
    // Script watch pour changements
    await this.createWatchScript();
    
    // CI/CD pour documentation
    await this.createDocumentationCI();
    
    console.log('    ‚úÖ Auto-update configur√©');
  }

  /**
   * üîß M√âTHODES D'ANALYSE SP√âCIFIQUES
   */
  async analyzeComponentsForDocs() {
    const components = [];
    const componentsDir = path.join(this.projectRoot, 'src', 'components');
    
    if (fs.existsSync(componentsDir)) {
      const componentFiles = this.getFilesRecursive(componentsDir, ['.tsx', '.jsx']);
      
      for (const file of componentFiles) {
        const component = await this.analyzeComponentForDocs(file);
        if (component) components.push(component);
      }
    }
    
    return components;
  }

  async analyzeComponentForDocs(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      const componentName = path.basename(filePath, path.extname(filePath));
      
      return {
        name: componentName,
        filePath,
        code: content,
        props: this.extractPropsForDocs(content),
        description: this.extractComponentDescription(content),
        examples: this.extractExamples(content),
        complexity: this.calculateComplexity(content),
        hasJSDoc: content.includes('/**'),
        exports: this.extractExports(content)
      };
    } catch (error) {
      return null;
    }
  }

  async analyzeHooksForDocs() {
    const hooks = [];
    const hooksDir = path.join(this.projectRoot, 'src', 'hooks');
    
    if (fs.existsSync(hooksDir)) {
      const hookFiles = this.getFilesRecursive(hooksDir, ['.ts', '.tsx']);
      
      for (const file of hookFiles) {
        const hook = await this.analyzeHookForDocs(file);
        if (hook) hooks.push(hook);
      }
    }
    
    return hooks;
  }

  async analyzeHookForDocs(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      const hookName = path.basename(filePath, path.extname(filePath));
      
      if (!hookName.startsWith('use')) return null;
      
      return {
        name: hookName,
        filePath,
        code: content,
        parameters: this.extractHookParameters(content),
        returnType: this.extractReturnType(content),
        description: this.extractHookDescription(content),
        examples: this.extractExamples(content),
        dependencies: this.extractDependencies(content)
      };
    } catch (error) {
      return null;
    }
  }

  async analyzeUtilitiesForDocs() {
    const utilities = [];
    const utilsDir = path.join(this.projectRoot, 'src', 'utils');
    
    if (fs.existsSync(utilsDir)) {
      const utilFiles = this.getFilesRecursive(utilsDir, ['.ts', '.tsx']);
      
      for (const file of utilFiles) {
        const util = await this.analyzeUtilityForDocs(file);
        if (util) utilities.push(util);
      }
    }
    
    return utilities;
  }

  async analyzeApiRoutesForDocs() {
    const routes = [];
    const apiDirs = [
      path.join(this.projectRoot, 'src', 'app', 'api'),
      path.join(this.projectRoot, 'pages', 'api')
    ];
    
    for (const apiDir of apiDirs) {
      if (fs.existsSync(apiDir)) {
        const apiFiles = this.getFilesRecursive(apiDir, ['.ts', '.js']);
        
        for (const file of apiFiles) {
          const route = await this.analyzeApiRouteForDocs(file);
          if (route) routes.push(route);
        }
      }
    }
    
    return routes;
  }

  async analyzeTypesForDocs() {
    const types = [];
    const typesPath = path.join(this.projectRoot, 'src', 'types', 'types.ts');
    
    if (fs.existsSync(typesPath)) {
      const content = fs.readFileSync(typesPath, 'utf-8');
      
      // Extraction interfaces
      const interfaceMatches = content.matchAll(/export interface (\w+) {([^}]+)}/g);
      
      for (const match of interfaceMatches) {
        types.push({
          name: match[1],
          type: 'interface',
          definition: match[0],
          properties: this.parseInterfaceProperties(match[2]),
          description: this.extractTypeDescription(content, match[1])
        });
      }
      
      // Extraction types
      const typeMatches = content.matchAll(/export type (\w+) = ([^;]+);/g);
      
      for (const match of typeMatches) {
        types.push({
          name: match[1],
          type: 'type',
          definition: match[0],
          description: this.extractTypeDescription(content, match[1])
        });
      }
    }
    
    this.documentationMetrics.typesDocumented = types.length;
    return types;
  }

  async extractProjectFeatures(analysis) {
    const featuresPrompt = `
Analyse ce projet pour identifier les features principales :

COMPOSANTS: ${analysis.components.length}
HOOKS: ${analysis.hooks.length}
API ROUTES: ${analysis.apiRoutes.length}
ARCHITECTURE: ${JSON.stringify(analysis.architecture, null, 2)}

Identifie les features principales :
1. Fonctionnalit√©s m√©tier
2. Capacit√©s techniques
3. Int√©grations
4. Points forts du projet

Retourne liste de features avec descriptions.
`;

    try {
      const features = await this.claudeAPI.analyzeWithCache(
        'project-features',
        featuresPrompt,
        'Tu identifies les features principales d\'un projet de d√©veloppement'
      );

      return features.features || [];
    } catch (error) {
      return [];
    }
  }

  // M√©thodes d'extraction
  extractPropsForDocs(content) {
    const propsMatch = content.match(/interface\s+\w*Props\s*{([^}]+)}/);
    if (!propsMatch) return [];
    
    const propsBody = propsMatch[1];
    const props = [];
    
    propsBody.split('\n').forEach(line => {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('//')) {
        const propMatch = trimmed.match(/(\w+)(\??):\s*([^;,]+)/);
        if (propMatch) {
          props.push({
            name: propMatch[1],
            optional: propMatch[2] === '?',
            type: propMatch[3].trim(),
            description: ''
          });
        }
      }
    });
    
    return props;
  }

  extractComponentDescription(content) {
    const jsdocMatch = content.match(/\/\*\*([\s\S]*?)\*\//);
    if (jsdocMatch) {
      return jsdocMatch[1].replace(/\s*\*\s?/g, ' ').trim();
    }
    
    const commentMatch = content.match(/\/\/\s*(.+)/);
    return commentMatch ? commentMatch[1].trim() : '';
  }

  extractExamples(content) {
    const examples = [];
    const exampleMatches = content.matchAll(/@example\s*([\s\S]*?)(?=@|\*\/)/g);
    
    for (const match of exampleMatches) {
      examples.push(match[1].trim());
    }
    
    return examples;
  }

  calculateComplexity(content) {
    const lines = content.split('\n').length;
    const functions = (content.match(/function|const.*=.*=>/g) || []).length;
    const conditions = (content.match(/if|switch|case|\?|&&|\|\|/g) || []).length;
    
    const complexity = functions + conditions + Math.floor(lines / 50);
    
    if (complexity > 20) return 'high';
    if (complexity > 10) return 'medium';
    return 'low';
  }

  extractExports(content) {
    const exports = [];
    const exportMatches = content.matchAll(/export\s+(?:default\s+)?(?:function|const|class|interface|type)\s+(\w+)/g);
    
    for (const match of exportMatches) {
      exports.push(match[1]);
    }
    
    return exports;
  }

  // M√©thodes de g√©n√©ration de documentation sp√©cialis√©es
  async generateOpenApiSpec(apiRoutes) {
    const openApiPrompt = `
G√©n√®re une sp√©cification OpenAPI 3.0 pour ces routes API :

ROUTES:
${JSON.stringify(apiRoutes, null, 2)}

Sp√©cification compl√®te avec :
1. Info et metadata
2. Paths et m√©thodes
3. Schemas des models
4. Responses et error codes
5. Security schemes
6. Examples

Format JSON OpenAPI 3.0 valide.
`;

    try {
      const openApiSpec = await this.claudeAPI.generateWithCache(
        'openapi-specification',
        openApiPrompt,
        'Tu g√©n√®res des sp√©cifications OpenAPI compl√®tes et valides'
      );

      const specPath = path.join(this.docsDir, 'api', 'openapi.json');
      this.ensureDirectoryExists(path.dirname(specPath));
      fs.writeFileSync(specPath, JSON.stringify(openApiSpec, null, 2));

      console.log('    üìÑ Sp√©cification OpenAPI g√©n√©r√©e');
    } catch (error) {
      console.warn('    ‚ö†Ô∏è Erreur g√©n√©ration OpenAPI:', error.message);
    }
  }

  async generateInteractiveApiDocs(apiRoutes) {
    // G√©n√©ration documentation interactive avec Swagger UI
    const swaggerHtml = `
<!DOCTYPE html>
<html>
<head>
    <title>API Documentation</title>
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@3.52.5/swagger-ui.css" />
</head>
<body>
    <div id="swagger-ui"></div>
    <script src="https://unpkg.com/swagger-ui-dist@3.52.5/swagger-ui-bundle.js"></script>
    <script>
        SwaggerUIBundle({
            url: './openapi.json',
            dom_id: '#swagger-ui',
            presets: [
                SwaggerUIBundle.presets.apis,
                SwaggerUIBundle.presets.standalone
            ]
        });
    </script>
</body>
</html>`;
    
    const swaggerPath = path.join(this.docsDir, 'api', 'index.html');
    this.ensureDirectoryExists(path.dirname(swaggerPath));
    fs.writeFileSync(swaggerPath, swaggerHtml);
    
    console.log('    üåê Documentation API interactive cr√©√©e');
  }

  // M√©thodes utilitaires
  loadDocumentationConfig() {
    return {
      formats: ['markdown', 'html', 'json'],
      autoUpdate: true,
      includePrivate: false,
      generateExamples: true,
      languages: ['fr', 'en'],
      theme: 'default'
    };
  }

  loadProjectAnalysis() {
    try {
      const analysisPath = path.join(this.projectRoot, 'data', 'ai-memory', 'latest-analysis.json');
      if (fs.existsSync(analysisPath)) {
        return JSON.parse(fs.readFileSync(analysisPath, 'utf-8'));
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Impossible de charger l\'analyse projet');
    }
    return null;
  }

  loadDocumentationTemplates() {
    return {
      readme: 'default',
      component: 'react',
      api: 'openapi',
      guide: 'tutorial'
    };
  }

  getFilesRecursive(dir, extensions) {
    let files = [];
    
    try {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory() && !item.startsWith('.') && !item.startsWith('node_modules')) {
          files = files.concat(this.getFilesRecursive(fullPath, extensions));
        } else if (stat.isFile() && extensions.includes(path.extname(item))) {
          files.push(fullPath);
        }
      }
    } catch (error) {
      // Ignore les erreurs de lecture
    }
    
    return files;
  }

  ensureDirectoryExists(dir) {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  }

  // Stubs pour les m√©thodes non impl√©ment√©es dans cet exemple
  async addJSDocToHook(hook) { this.documentationMetrics.jsdocGenerated++; }
  async addJSDocToUtility(utility) { this.documentationMetrics.jsdocGenerated++; }
  async addJSDocToApiRoute(route) { this.documentationMetrics.jsdocGenerated++; }
  async analyzeUtilityForDocs(filePath) { return null; }
  async analyzeApiRouteForDocs(filePath) { return null; }
  async analyzeArchitectureForDocs() { return {}; }
  async analyzeDependenciesForDocs() { return {}; }
  async generateDevelopmentGuide(codeAnalysis) { return true; }
  async generateDeploymentGuide(codeAnalysis) { return true; }
  async generateArchitectureGuide(codeAnalysis) { return true; }
  async generateContributingGuide(codeAnalysis) { return true; }
  async generateApiExamples(apiRoutes) {}
  async generateComponentDocumentation(codeAnalysis) {}
  async createDocusaurusConfig() {}
  async generateNavigationStructure() {}
  async generateHomePage() {}
  async generateDeploymentConfig() {}
  async createGitHooks() {}
  async createWatchScript() {}
  async createDocumentationCI() {}
  
  extractHookParameters(content) { return []; }
  extractReturnType(content) { return 'unknown'; }
  extractHookDescription(content) { return ''; }
  extractDependencies(content) { return []; }
  parseInterfaceProperties(propsBody) { return []; }
  extractTypeDescription(content, typeName) { return ''; }

  /**
   * üìä RAPPORT DOCUMENTATION FINAL
   */
  generateDocumentationReport(codeAnalysis) {
    const duration = Date.now() - this.documentationMetrics.startTime;
    
    console.log('\nüìä RAPPORT INTELLIGENT DOCUMENTER');
    console.log('=====================================');
    console.log(`‚è±Ô∏è  Dur√©e: ${Math.round(duration / 1000)}s`);
    console.log(`üìÅ Fichiers document√©s: ${this.documentationMetrics.filesDocumented}`);
    console.log(`üìù JSDoc g√©n√©r√©s: ${this.documentationMetrics.jsdocGenerated}`);
    console.log(`üìñ README mis √† jour: ${this.documentationMetrics.readmeUpdated ? 'Oui' : 'Non'}`);
    console.log(`üåê APIs document√©es: ${this.documentationMetrics.apiDocsGenerated}`);
    console.log(`üìã Guides cr√©√©s: ${this.documentationMetrics.guidesCreated}`);
    console.log(`üìò Types document√©s: ${this.documentationMetrics.typesDocumented}`);
    
    // D√©tail par cat√©gorie
    console.log('\nüìö DOCUMENTATION G√âN√âR√âE:');
    console.log(`   ‚öõÔ∏è  Composants: ${codeAnalysis.components.length} document√©s`);
    console.log(`   ü™ù Hooks: ${codeAnalysis.hooks.length} document√©s`);
    console.log(`   üîß Utilitaires: ${codeAnalysis.utilities.length} document√©s`);
    console.log(`   üåê Routes API: ${codeAnalysis.apiRoutes.length} document√©es`);
    console.log(`   üìò Types: ${codeAnalysis.types.length} document√©s`);
    
    // Features document√©es
    if (codeAnalysis.features.length > 0) {
      console.log('\n‚ú® FEATURES DOCUMENT√âES:');
      codeAnalysis.features.slice(0, 5).forEach(feature => {
        console.log(`   ‚Ä¢ ${feature.name || feature.description}`);
      });
    }
    
    // Structure documentation
    console.log('\nüìÅ STRUCTURE DOCUMENTATION:');
    console.log('   üìñ README.md (principal)');
    console.log('   üìÅ docs/');
    console.log('     üìò installation.md');
    console.log('     üèóÔ∏è development.md');
    console.log('     üöÄ deployment.md');
    console.log('     üèõÔ∏è architecture.md');
    console.log('     ü§ù contributing.md');
    console.log('     üìÅ api/');
    console.log('       üåê index.html (Swagger UI)');
    console.log('       üìÑ openapi.json');
    console.log('     üìÅ components/');
    console.log('     üìÅ hooks/');
    
    // M√©triques qualit√©
    const qualityScore = this.calculateDocumentationQuality(codeAnalysis);
    console.log('\nüìä QUALIT√â DOCUMENTATION:');
    console.log(`   üìà Score global: ${qualityScore.overall}/100`);
    console.log(`   üìù Coverage JSDoc: ${qualityScore.jsdocCoverage}%`);
    console.log(`   üìñ Exemples: ${qualityScore.examplesCoverage}%`);
    console.log(`   üîó Liens internes: ${qualityScore.internalLinks}`);
    
    // Recommandations d'am√©lioration
    console.log('\nüí° RECOMMANDATIONS:');
    
    if (qualityScore.jsdocCoverage < 80) {
      console.log(`   üìù Am√©liorer JSDoc coverage (objectif: 80%, actuel: ${qualityScore.jsdocCoverage}%)`);
    }
    
    if (qualityScore.examplesCoverage < 60) {
      console.log(`   üìö Ajouter plus d'exemples (objectif: 60%, actuel: ${qualityScore.examplesCoverage}%)`);
    }
    
    if (codeAnalysis.components.length > 10 && this.documentationMetrics.guidesCreated < 3) {
      console.log('   üìã Cr√©er guides sp√©cialis√©s suppl√©mentaires');
    }
    
    // Auto-update
    console.log('\nüîÑ AUTO-UPDATE CONFIGUR√â:');
    console.log('   üìù Git hooks: Pre-commit documentation check');
    console.log('   üëÄ Watch mode: Auto-regeneration sur changements');
    console.log('   üöÄ CI/CD: D√©ploiement automatique documentation');
    console.log('   üîó Link validation: V√©rification liens morts');
    
    // Next steps
    console.log('\nüöÄ PROCHAINES √âTAPES:');
    console.log('   1. R√©viser documentation g√©n√©r√©e');
    console.log('   2. Ajouter screenshots/GIFs dans README');
    console.log('   3. Personnaliser guides selon projet');
    console.log('   4. Configurer d√©ploiement site documentation');
    console.log('   5. Former √©quipe √† maintenance documentation');
    
    // Acc√®s documentation
    console.log('\nüåê ACC√àS DOCUMENTATION:');
    console.log('   üìñ README: ./README.md');
    console.log('   üìö Guides: ./docs/');
    console.log('   üåê API Docs: ./docs/api/index.html');
    console.log('   üì± Site web: npm run docs:serve');
    
    console.log('\n‚úÖ INTELLIGENT DOCUMENTER TERMIN√â !');
    
    // Sauvegarde rapport
    this.saveDocumentationReport(codeAnalysis, qualityScore);
  }

  /**
   * üìä CALCUL QUALIT√â DOCUMENTATION
   */
  calculateDocumentationQuality(codeAnalysis) {
    const totalFiles = codeAnalysis.components.length + codeAnalysis.hooks.length + codeAnalysis.utilities.length;
    const documentedFiles = this.documentationMetrics.filesDocumented;
    
    // JSDoc Coverage
    const jsdocCoverage = totalFiles > 0 ? (this.documentationMetrics.jsdocGenerated / totalFiles * 100) : 100;
    
    // Examples Coverage
    const filesWithExamples = codeAnalysis.components.filter(c => c.examples && c.examples.length > 0).length;
    const examplesCoverage = totalFiles > 0 ? (filesWithExamples / totalFiles * 100) : 0;
    
    // Calcul score global
    const scores = {
      documentation: documentedFiles / Math.max(totalFiles, 1) * 100,
      jsdoc: jsdocCoverage,
      examples: examplesCoverage,
      guides: Math.min(this.documentationMetrics.guidesCreated / 5 * 100, 100),
      api: this.documentationMetrics.apiDocsGenerated > 0 ? 100 : 0
    };
    
    const overall = Object.values(scores).reduce((sum, score) => sum + score, 0) / Object.keys(scores).length;
    
    return {
      overall: Math.round(overall),
      jsdocCoverage: Math.round(jsdocCoverage),
      examplesCoverage: Math.round(examplesCoverage),
      internalLinks: this.countInternalLinks(),
      scores
    };
  }

  countInternalLinks() {
    // Comptage des liens internes dans la documentation
    let linksCount = 0;
    
    try {
      const readmePath = path.join(this.projectRoot, 'README.md');
      if (fs.existsSync(readmePath)) {
        const content = fs.readFileSync(readmePath, 'utf-8');
        const links = content.match(/\[.*?\]\(\.\/.*?\)/g) || [];
        linksCount += links.length;
      }
    } catch (error) {
      // Ignore errors
    }
    
    return linksCount;
  }

  /**
   * üíæ SAUVEGARDE RAPPORT DOCUMENTATION
   */
  saveDocumentationReport(codeAnalysis, qualityScore) {
    try {
      const memoryPath = path.join(this.projectRoot, 'data', 'ai-memory');
      if (!fs.existsSync(memoryPath)) {
        fs.mkdirSync(memoryPath, { recursive: true });
      }
      
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const reportFile = path.join(memoryPath, `documentation-report-${timestamp}.json`);
      
      const report = {
        timestamp: Date.now(),
        metrics: this.documentationMetrics,
        quality: qualityScore,
        analysis: {
          components: codeAnalysis.components.length,
          hooks: codeAnalysis.hooks.length,
          utilities: codeAnalysis.utilities.length,
          apiRoutes: codeAnalysis.apiRoutes.length,
          types: codeAnalysis.types.length,
          features: codeAnalysis.features.length
        },
        recommendations: this.generateDocumentationRecommendations(qualityScore),
        structure: this.getDocumentationStructure()
      };
      
      fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
      console.log(`üíæ Rapport documentation sauvegard√©: ${reportFile}`);
      
      // G√©n√©ration rapport HTML
      this.generateDocumentationReportHTML(report, reportFile.replace('.json', '.html'));
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur sauvegarde rapport: ${error.message}`);
    }
  }

  generateDocumentationRecommendations(qualityScore) {
    const recommendations = [];
    
    // Recommandations JSDoc
    if (qualityScore.jsdocCoverage < 80) {
      recommendations.push({
        category: 'JSDoc',
        priority: 'High',
        action: `Am√©liorer JSDoc coverage de ${qualityScore.jsdocCoverage}% √† 80%`,
        impact: 'Meilleure compr√©hension du code',
        effort: 'Medium'
      });
    }
    
    // Recommandations exemples
    if (qualityScore.examplesCoverage < 60) {
      recommendations.push({
        category: 'Examples',
        priority: 'Medium',
        action: `Ajouter exemples (actuellement ${qualityScore.examplesCoverage}%)`,
        impact: 'Facilit√© d\'utilisation',
        effort: 'Low'
      });
    }
    
    // Recommandations guides
    if (this.documentationMetrics.guidesCreated < 5) {
      recommendations.push({
        category: 'Guides',
        priority: 'Medium',
        action: 'Compl√©ter guides utilisateur',
        impact: 'Onboarding d√©veloppeurs',
        effort: 'High'
      });
    }
    
    // Recommandations qualit√© globale
    if (qualityScore.overall < 70) {
      recommendations.push({
        category: 'Quality',
        priority: 'High',
        action: `Am√©liorer qualit√© globale (score: ${qualityScore.overall}/100)`,
        impact: 'Maintenance et collaboration',
        effort: 'High'
      });
    }
    
    return recommendations;
  }

  getDocumentationStructure() {
    const structure = {
      readme: fs.existsSync(path.join(this.projectRoot, 'README.md')),
      docsFolder: fs.existsSync(this.docsDir),
      apiDocs: fs.existsSync(path.join(this.docsDir, 'api')),
      guides: [],
      jsdocFiles: this.documentationMetrics.jsdocGenerated
    };
    
    // Scan guides dans docs/
    if (structure.docsFolder) {
      try {
        const files = fs.readdirSync(this.docsDir);
        structure.guides = files.filter(f => f.endsWith('.md'));
      } catch (error) {
        // Ignore errors
      }
    }
    
    return structure;
  }

  generateDocumentationReportHTML(report, outputPath) {
    const htmlTemplate = `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport Documentation - ${new Date().toLocaleDateString()}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 20px; background: #f8f9fa; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 40px; }
        .quality-score { font-size: 64px; font-weight: bold; color: ${this.getQualityColor(report.quality.overall)}; margin: 20px 0; }
        .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 30px 0; }
        .metric { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 12px; text-align: center; }
        .metric-value { font-size: 32px; font-weight: bold; margin-bottom: 5px; }
        .metric-label { font-size: 14px; opacity: 0.9; }
        .section { margin: 40px 0; }
        .section h2 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
        .progress-bar { width: 100%; height: 24px; background: #ecf0f1; border-radius: 12px; overflow: hidden; margin: 10px 0; }
        .progress-fill { height: 100%; background: linear-gradient(90deg, #3498db, #2ecc71); }
        .recommendation { background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%); color: white; padding: 20px; margin: 15px 0; border-radius: 12px; }
        .priority-high { background: linear-gradient(135deg, #ff7675 0%, #d63031 100%); }
        .priority-medium { background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%); }
        .file-list { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }
        .file-item { background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #3498db; }
        .feature-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .feature-card { background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); padding: 20px; border-radius: 12px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìö Rapport Documentation Intelligente</h1>
            <div class="quality-score">${report.quality.overall}/100</div>
            <p>Score de qualit√© documentation</p>
            <p>G√©n√©r√© le ${new Date(report.timestamp).toLocaleString()}</p>
        </div>
        
        <div class="metrics">
            <div class="metric">
                <div class="metric-value">${report.metrics.filesDocumented}</div>
                <div class="metric-label">Fichiers Document√©s</div>
            </div>
            <div class="metric">
                <div class="metric-value">${report.metrics.jsdocGenerated}</div>
                <div class="metric-label">JSDoc G√©n√©r√©s</div>
            </div>
            <div class="metric">
                <div class="metric-value">${report.metrics.apiDocsGenerated}</div>
                <div class="metric-label">APIs Document√©es</div>
            </div>
            <div class="metric">
                <div class="metric-value">${report.metrics.guidesCreated}</div>
                <div class="metric-label">Guides Cr√©√©s</div>
            </div>
        </div>
        
        <div class="section">
            <h2>üìä M√©triques de Qualit√©</h2>
            
            <div style="margin: 20px 0;">
                <strong>JSDoc Coverage: ${report.quality.jsdocCoverage}%</strong>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${report.quality.jsdocCoverage}%"></div>
                </div>
            </div>
            
            <div style="margin: 20px 0;">
                <strong>Examples Coverage: ${report.quality.examplesCoverage}%</strong>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${report.quality.examplesCoverage}%"></div>
                </div>
            </div>
            
            <div style="margin: 20px 0;">
                <strong>Liens Internes: ${report.quality.internalLinks}</strong>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${Math.min(report.quality.internalLinks * 10, 100)}%"></div>
                </div>
            </div>
        </div>
        
        <div class="section">
            <h2>üìÅ Structure Documentation</h2>
            <div class="file-list">
                <div class="file-item">
                    <strong>üìñ README.md</strong><br>
                    <small>${report.structure.readme ? '‚úÖ Pr√©sent' : '‚ùå Manquant'}</small>
                </div>
                <div class="file-item">
                    <strong>üìÅ docs/</strong><br>
                    <small>${report.structure.docsFolder ? '‚úÖ Cr√©√©' : '‚ùå Manquant'}</small>
                </div>
                <div class="file-item">
                    <strong>üåê API Docs</strong><br>
                    <small>${report.structure.apiDocs ? '‚úÖ G√©n√©r√©e' : '‚ùå Manquante'}</small>
                </div>
                <div class="file-item">
                    <strong>üìã Guides</strong><br>
                    <small>${report.structure.guides.length} fichiers</small>
                </div>
            </div>
        </div>
        
        <div class="section">
            <h2>üìà Analyse Contenu</h2>
            <div class="feature-grid">
                <div class="feature-card">
                    <h3>‚öõÔ∏è Composants</h3>
                    <p><strong>${report.analysis.components}</strong> composants analys√©s</p>
                    <p>Documentation JSDoc automatique g√©n√©r√©e</p>
                </div>
                <div class="feature-card">
                    <h3>ü™ù Hooks</h3>
                    <p><strong>${report.analysis.hooks}</strong> hooks personnalis√©s</p>
                    <p>Documentation parameters et return types</p>
                </div>
                <div class="feature-card">
                    <h3>üåê API Routes</h3>
                    <p><strong>${report.analysis.apiRoutes}</strong> routes document√©es</p>
                    <p>Sp√©cification OpenAPI g√©n√©r√©e</p>
                </div>
                <div class="feature-card">
                    <h3>üìò Types</h3>
                    <p><strong>${report.analysis.types}</strong> types TypeScript</p>
                    <p>Documentation interfaces et types</p>
                </div>
            </div>
        </div>
        
        <div class="section">
            <h2>üí° Recommandations</h2>
            ${report.recommendations.map(rec => `
                <div class="recommendation priority-${rec.priority.toLowerCase()}">
                    <strong>${rec.action}</strong><br>
                    <small>Cat√©gorie: ${rec.category} | Priorit√©: ${rec.priority} | Impact: ${rec.impact} | Effort: ${rec.effort}</small>
                </div>
            `).join('')}
        </div>
        
        <div class="section">
            <h2>üöÄ Actions Suivantes</h2>
            <div style="background: #e8f5e8; padding: 20px; border-radius: 12px; border-left: 4px solid #27ae60;">
                <ol>
                    <li><strong>R√©vision manuelle:</strong> V√©rifier et personnaliser la documentation g√©n√©r√©e</li>
                    <li><strong>Assets visuels:</strong> Ajouter screenshots, diagrammes et GIFs</li>
                    <li><strong>Exemples pratiques:</strong> Enrichir avec des exemples d'utilisation r√©els</li>
                    <li><strong>D√©ploiement:</strong> Configurer h√©bergement de la documentation</li>
                    <li><strong>Maintenance:</strong> Former l'√©quipe √† maintenir la documentation</li>
                </ol>
            </div>
        </div>
        
        <div class="section">
            <h2>üîó Acc√®s Documentation</h2>
            <div style="background: #f8f9fa; padding: 20px; border-radius: 12px;">
                <p><strong>üìñ README principal:</strong> <code>./README.md</code></p>
                <p><strong>üìö Guides complets:</strong> <code>./docs/</code></p>
                <p><strong>üåê Documentation API:</strong> <code>./docs/api/index.html</code></p>
                <p><strong>üñ•Ô∏è Site documentation:</strong> <code>npm run docs:serve</code></p>
            </div>
        </div>
    </div>
</body>
</html>`;
    
    fs.writeFileSync(outputPath, htmlTemplate);
    console.log(`üìÑ Rapport HTML documentation g√©n√©r√©: ${outputPath}`);
  }

  getQualityColor(score) {
    if (score >= 90) return '#27ae60';
    if (score >= 75) return '#f39c12';
    if (score >= 60) return '#e67e22';
    return '#e74c3c';
  }
}

/**
 * üöÄ EX√âCUTION SI SCRIPT DIRECT
 */
if (require.main === module) {
  const intelligentDocumenter = new IntelligentDocumenter();
  
  intelligentDocumenter.generateIntelligentDocumentation()
    .then(success => {
      if (success) {
        console.log('\nüéâ DOCUMENTATION INTELLIGENTE R√âUSSIE !');
        
        // Communication avec build-server
        process.stdout.write(JSON.stringify({
          success: true,
          filesDocumented: intelligentDocumenter.documentationMetrics.filesDocumented,
          jsdocGenerated: intelligentDocumenter.documentationMetrics.jsdocGenerated,
          apiDocsGenerated: intelligentDocumenter.documentationMetrics.apiDocsGenerated,
          guidesCreated: intelligentDocumenter.documentationMetrics.guidesCreated
        }));
        
        process.exit(0);
      } else {
        console.log('\n‚ùå DOCUMENTATION INTELLIGENTE √âCHOU√âE');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('\nüí• ERREUR CRITIQUE INTELLIGENT DOCUMENTER:', error.message);
      process.exit(1);
    });
}

module.exports = { IntelligentDocumenter };