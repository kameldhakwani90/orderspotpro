const { execSync } = require('child_process');
const fs = require('fs');

console.log('üóÑÔ∏è Configuration base de donn√©es D√âFINITIVE - PR√âSERVATION TOTALE');

async function setupDatabase() {
  try {
    // V√©rifier .env
    if (!fs.existsSync('../.env')) {
      console.log('‚ùå Fichier .env manquant');
      return false;
    }
    
    console.log('üîç D√©tection base de donn√©es existante...');
    
    // Variables d'environnement pour forcer mode non-interactif
    const safeEnv = {
      ...process.env,
      CI: 'true',
      PRISMA_MIGRATE_SKIP_GENERATE: 'true',
      PRISMA_MIGRATE_SKIP_SEED: 'true',
      FORCE_COLOR: '0'
    };
    
    // Test existence base
    let hasExistingData = false;
    try {
      execSync('npx prisma db pull --print', { 
        stdio: 'pipe', 
        timeout: 10000,
        cwd: '..',
        env: safeEnv
      });
      hasExistingData = true;
      console.log('‚úÖ Base existante d√©tect√©e - PR√âSERVATION ACTIV√âE');
    } catch (error) {
      console.log('üí° Nouvelle base de donn√©es');
    }
    
    if (hasExistingData) {
      // JAMAIS de reset pour donn√©es existantes
      console.log('üõ°Ô∏è Push schema SANS reset (pr√©serve donn√©es)...');
      try {
        execSync('npx prisma db push --accept-data-loss=false --skip-generate', { 
          stdio: 'inherit', 
          timeout: 60000,
          cwd: '..',
          env: safeEnv
        });
        console.log('‚úÖ Schema mis √† jour avec pr√©servation des donn√©es');
      } catch (error) {
        console.log('‚ö†Ô∏è Push schema √©chou√© - on continue avec generate...');
      }
    } else {
      // Nouvelle DB - push normal mais JAMAIS de reset
      console.log('üîß Initialisation nouvelle base...');
      try {
        execSync('npx prisma db push --skip-generate', { 
          stdio: 'inherit', 
          timeout: 60000,
          cwd: '..',
          env: safeEnv
        });
        console.log('‚úÖ Nouvelle base initialis√©e');
      } catch (error) {
        console.log('‚ö†Ô∏è Initialisation √©chou√©e - on continue...');
      }
    }
    
    // Generate client TOUJOURS en mode safe
    console.log('üîÑ G√©n√©ration client Prisma (mode safe)...');
    try {
      execSync('npx prisma generate', { 
        stdio: 'inherit', 
        timeout: 60000,
        cwd: '..',
        env: safeEnv
      });
      console.log('‚úÖ Client Prisma g√©n√©r√©');
    } catch (error) {
      console.log('‚ö†Ô∏è Generate client √©chou√© - sera g√©n√©r√© plus tard');
    }
    
    console.log('‚úÖ Configuration base termin√©e');
    if (hasExistingData) {
      console.log('üõ°Ô∏è TOUTES LES DONN√âES EXISTANTES PR√âSERV√âES');
    }
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur configuration DB:', error.message);
    console.log('üí° Mais on continue le pipeline...');
    return true; // Continue m√™me en cas d'erreur
  }
}

setupDatabase();