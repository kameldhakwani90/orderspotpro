const fs = require('fs');
const path = require('path');

console.log('üöÄ SERVICE PRISMA - G√©n√©ration CRUD COMPL√àTE et robuste...');

const typesPath = path.join(__dirname, '../src/lib/types.ts');
const servicePath = path.join(__dirname, '../src/lib/prisma-service.ts');

try {
  console.log('üìñ Lecture de types.ts...');
  
  if (!fs.existsSync(typesPath)) {
    console.error('‚ùå types.ts introuvable:', typesPath);
    process.exit(1);
  }
  
  const typesContent = fs.readFileSync(typesPath, 'utf-8');
  console.log('‚úÖ types.ts lu, taille:', typesContent.length, 'caract√®res');
  
  // Extraction simple et robuste des interfaces
  const interfaceMatches = typesContent.match(/export\s+interface\s+(\w+)/g);
  if (!interfaceMatches || interfaceMatches.length === 0) {
    console.error('‚ùå Aucune interface trouv√©e dans types.ts');
    console.log('üìã Aper√ßu du contenu:');
    console.log(typesContent.substring(0, 1000));
    process.exit(1);
  }
  
  const interfaces = interfaceMatches.map(match => match.replace(/export\s+interface\s+/, ''));
  console.log('üìã ' + interfaces.length + ' interfaces d√©tect√©es: ' + interfaces.join(', '));
  
  // G√©n√©ration du service - Version CRUD COMPL√àTE
  console.log('üîß G√©n√©ration du service CRUD complet...');
  
  const serviceLines = [];
  
  // Header
  serviceLines.push('// Service Prisma g√©n√©r√© automatiquement avec CRUD COMPLET depuis types.ts');
  serviceLines.push('import { PrismaClient } from "@prisma/client";');
  serviceLines.push('');
  serviceLines.push('declare global {');
  serviceLines.push('  var prisma: PrismaClient | undefined;');
  serviceLines.push('}');
  serviceLines.push('');
  serviceLines.push('export const prisma = globalThis.prisma || new PrismaClient({');
  serviceLines.push('  log: process.env.NODE_ENV === "development" ? ["query", "error", "warn"] : ["error"],');
  serviceLines.push('});');
  serviceLines.push('');
  serviceLines.push('if (process.env.NODE_ENV !== "production") {');
  serviceLines.push('  globalThis.prisma = prisma;');
  serviceLines.push('}');
  serviceLines.push('');
  serviceLines.push('// ============================================');
  serviceLines.push('// FONCTIONS CRUD COMPL√àTES POUR TOUS LES MOD√àLES');
  serviceLines.push('// ============================================');
  serviceLines.push('');
  
  // G√©n√©rer CRUD COMPLET pour chaque interface
  interfaces.forEach(modelName => {
    const camelName = modelName.charAt(0).toLowerCase() + modelName.slice(1);
    const pluralName = modelName.toLowerCase() + 's';
    
    serviceLines.push('// =============== ' + modelName.toUpperCase() + ' - CRUD COMPLET ===============');
    serviceLines.push('');
    
    // 1. GET BY ID
    serviceLines.push('export async function get' + modelName + 'ById(id: number) {');
    serviceLines.push('  try {');
    serviceLines.push('    return await prisma.' + camelName + '.findUnique({');
    serviceLines.push('      where: { id: id }');
    serviceLines.push('    });');
    serviceLines.push('  } catch (error) {');
    serviceLines.push('    console.error("Erreur get' + modelName + 'ById:", error);');
    serviceLines.push('    throw error;');
    serviceLines.push('  }');
    serviceLines.push('}');
    serviceLines.push('');
    
    // 2. GET ALL
    serviceLines.push('export async function getAll' + modelName + 's() {');
    serviceLines.push('  try {');
    serviceLines.push('    return await prisma.' + camelName + '.findMany({');
    serviceLines.push('      orderBy: { createdAt: "desc" }');
    serviceLines.push('    });');
    serviceLines.push('  } catch (error) {');
    serviceLines.push('    console.error("Erreur getAll' + modelName + 's:", error);');
    serviceLines.push('    throw error;');
    serviceLines.push('  }');
    serviceLines.push('}');
    serviceLines.push('');
    
    // 3. CREATE
    serviceLines.push('export async function create' + modelName + '(data: any) {');
    serviceLines.push('  try {');
    serviceLines.push('    const cleanData = { ...data };');
    serviceLines.push('    delete cleanData.id;');
    serviceLines.push('    delete cleanData.createdAt;');
    serviceLines.push('    delete cleanData.updatedAt;');
    serviceLines.push('    ');
    serviceLines.push('    return await prisma.' + camelName + '.create({');
    serviceLines.push('      data: cleanData');
    serviceLines.push('    });');
    serviceLines.push('  } catch (error) {');
    serviceLines.push('    console.error("Erreur create' + modelName + ':", error);');
    serviceLines.push('    throw error;');
    serviceLines.push('  }');
    serviceLines.push('}');
    serviceLines.push('');
    
    // 4. UPDATE - NOUVELLE FONCTION
    serviceLines.push('export async function update' + modelName + '(id: number, data: any) {');
    serviceLines.push('  try {');
    serviceLines.push('    const cleanData = { ...data };');
    serviceLines.push('    delete cleanData.id;');
    serviceLines.push('    delete cleanData.createdAt;');
    serviceLines.push('    delete cleanData.updatedAt;');
    serviceLines.push('    ');
    serviceLines.push('    return await prisma.' + camelName + '.update({');
    serviceLines.push('      where: { id: id },');
    serviceLines.push('      data: cleanData');
    serviceLines.push('    });');
    serviceLines.push('  } catch (error) {');
    serviceLines.push('    console.error("Erreur update' + modelName + ':", error);');
    serviceLines.push('    throw error;');
    serviceLines.push('  }');
    serviceLines.push('}');
    serviceLines.push('');
    
    // 5. DELETE - NOUVELLE FONCTION
    serviceLines.push('export async function delete' + modelName + '(id: number) {');
    serviceLines.push('  try {');
    serviceLines.push('    return await prisma.' + camelName + '.delete({');
    serviceLines.push('      where: { id: id }');
    serviceLines.push('    });');
    serviceLines.push('  } catch (error) {');
    serviceLines.push('    console.error("Erreur delete' + modelName + ':", error);');
    serviceLines.push('    throw error;');
    serviceLines.push('  }');
    serviceLines.push('}');
    serviceLines.push('');
    
    // 6. ALIASES pour compatibilit√©
    serviceLines.push('// Aliases pour compatibilit√©');
    serviceLines.push('export const add' + modelName + ' = create' + modelName + ';');
    serviceLines.push('export const get' + pluralName + ' = getAll' + modelName + 's;');
    serviceLines.push('');
  });
  
  // Utilitaires
  serviceLines.push('// ============================================');
  serviceLines.push('// UTILITAIRES DE BASE');
  serviceLines.push('// ============================================');
  serviceLines.push('');
  serviceLines.push('export async function connectToDatabase() {');
  serviceLines.push('  try {');
  serviceLines.push('    await prisma.$connect();');
  serviceLines.push('    console.log("‚úÖ Connexion DB √©tablie");');
  serviceLines.push('    return true;');
  serviceLines.push('  } catch (error) {');
  serviceLines.push('    console.error("‚ùå Erreur connexion DB:", error);');
  serviceLines.push('    return false;');
  serviceLines.push('  }');
  serviceLines.push('}');
  serviceLines.push('');
  serviceLines.push('export async function healthCheck() {');
  serviceLines.push('  try {');
  serviceLines.push('    const result = await prisma.$queryRaw`SELECT 1`;');
  serviceLines.push('    return { status: "ok", timestamp: new Date().toISOString() };');
  serviceLines.push('  } catch (error) {');
  serviceLines.push('    return { status: "error", error: error.message, timestamp: new Date().toISOString() };');
  serviceLines.push('  }');
  serviceLines.push('}');
  
  // √âcriture du fichier
  const serviceContent = serviceLines.join('\n');
  
  // Cr√©er le r√©pertoire si n√©cessaire
  const serviceDir = path.dirname(servicePath);
  if (!fs.existsSync(serviceDir)) {
    fs.mkdirSync(serviceDir, { recursive: true });
    console.log('üìÅ R√©pertoire cr√©√©:', serviceDir);
  }
  
  fs.writeFileSync(servicePath, serviceContent, 'utf-8');
  
  // V√©rification finale avec r√©sum√© d√©taill√©
  if (fs.existsSync(servicePath)) {
    const size = fs.statSync(servicePath).size;
    console.log('‚úÖ Service g√©n√©r√© avec succ√®s:', servicePath);
    console.log('üìä Taille:', size, 'bytes');
    console.log('üìã Mod√®les trait√©s:', interfaces.length);
    
    console.log('\nüéØ R√âSUM√â - Fonctions g√©n√©r√©es par mod√®le:');
    interfaces.forEach(modelName => {
      console.log(`  ${modelName}:`);
      console.log(`    ‚úÖ get${modelName}ById()`);
      console.log(`    ‚úÖ getAll${modelName}s()`);
      console.log(`    ‚úÖ create${modelName}()`);
      console.log(`    ‚úÖ update${modelName}() ‚Üê NOUVEAU`);
      console.log(`    ‚úÖ delete${modelName}() ‚Üê NOUVEAU`);
      console.log(`    ‚úÖ add${modelName}() (alias)`);
    });
    
    console.log('\nüìä Total:', interfaces.length * 5, 'fonctions CRUD g√©n√©r√©es automatiquement !');
    
    if (size < 1000) {
      console.warn('‚ö†Ô∏è  Fichier semble petit, v√©rifiez le contenu');
    }
    
    console.log('\nüéâ G√©n√©ration CRUD COMPL√àTE termin√©e avec succ√®s !');
    console.log('üî• TOUTES les op√©rations CRUD sont maintenant disponibles !');
  } else {
    console.error('‚ùå Erreur: fichier non cr√©√©');
    process.exit(1);
  }
  
} catch (error) {
  console.error('‚ùå ERREUR CRITIQUE:', error.message);
  console.error('Stack:', error.stack);
  console.log('\nüîç Diagnostic:');
  console.log('- R√©pertoire courant:', __dirname);
  console.log('- types.ts path:', typesPath);
  console.log('- service.ts path:', servicePath);
  console.log('- types.ts existe:', fs.existsSync(typesPath));
  process.exit(1);
}
