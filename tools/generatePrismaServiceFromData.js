const fs = require('fs');
const path = require('path');

console.log('üîç G√©n√©ration de prisma-service.ts depuis schema.prisma...');

const schemaPath = path.join(__dirname, '../prisma/schema.prisma');
const outputPath = path.join(__dirname, '../src/lib/prisma-service.ts');

// V√©rifier que le schema Prisma existe
if (!fs.existsSync(schemaPath)) {
  console.error('‚ùå Fichier schema.prisma introuvable. Ex√©cutez generatePrismaSchema.js d\'abord.');
  process.exit(1);
}

console.log('üìñ Lecture du schema Prisma...');

// Lire le schema Prisma complet
const schemaContent = fs.readFileSync(schemaPath, 'utf-8');

// Fonction robuste pour extraire TOUS les mod√®les
function extractAllModels(content) {
  console.log('üîç Extraction des mod√®les depuis le schema...');
  
  // Regex plus robuste pour capturer les mod√®les
  const modelRegex = /^\s*model\s+(\w+)\s*\{/gm;
  const models = [];
  let match;
  
  // Reset regex pour recommencer depuis le d√©but
  modelRegex.lastIndex = 0;
  
  while ((match = modelRegex.exec(content)) !== null) {
    const modelName = match[1];
    models.push(modelName);
    console.log(`  ‚úÖ Mod√®le trouv√©: ${modelName}`);
  }
  
  return models;
}

// Extraire tous les mod√®les
const modelNames = extractAllModels(schemaContent);

if (modelNames.length === 0) {
  console.error('‚ùå Aucun mod√®le trouv√© dans schema.prisma');
  console.error('Contenu du schema (premi√®res lignes):');
  console.error(schemaContent.split('\n').slice(0, 20).join('\n'));
  process.exit(1);
}

console.log(`üîç Mod√®les trouv√©s: ${modelNames.join(', ')}`);
console.log(`üìä Total: ${modelNames.length} mod√®les`);

// Validation minimum
if (modelNames.length < 10) {
  console.error(`‚ùå ERREUR: Seulement ${modelNames.length} mod√®les trouv√©s (minimum 10 attendus)`);
  console.error('Le schema Prisma semble incomplet ou corrompu');
  process.exit(1);
}

// G√©n√©rer les imports et setup
let content = `// G√©n√©r√© automatiquement depuis schema.prisma
// Ne pas modifier manuellement ce fichier

import { PrismaClient } from '@prisma/client';

// Instance Prisma globale
declare global {
  var prisma: PrismaClient | undefined;
}

export const prisma = globalThis.prisma || new PrismaClient();

if (process.env.NODE_ENV !== 'production') {
  globalThis.prisma = prisma;
}

// ============================================
// FONCTIONS CRUD G√âN√âR√âES AUTOMATIQUEMENT
// ============================================

`;

// G√©n√©rer les fonctions CRUD pour chaque mod√®le
modelNames.forEach(modelName => {
  console.log(`üîß G√©n√©ration des fonctions pour ${modelName}...`);
  
  // Nom en camelCase pour Prisma
  const camelName = modelName.charAt(0).toLowerCase() + modelName.slice(1);
  
  // === FONCTIONS DE LECTURE ===
  
  // Fonction findById
  content += `// =============== ${modelName.toUpperCase()} ===============\n\n`;
  
  content += `export async function get${modelName}ById(id: string) {\n`;
  content += `  try {\n`;
  content += `    return await prisma.${camelName}.findUnique({ \n`;
  content += `      where: { id: id },\n`;
  content += `      include: {\n`;
  content += `        // Ajoutez ici les relations √† inclure si n√©cessaire\n`;
  content += `      }\n`;
  content += `    });\n`;
  content += `  } catch (error) {\n`;
  content += `    console.error('Erreur get${modelName}ById:', error);\n`;
  content += `    throw error;\n`;
  content += `  }\n`;
  content += `}\n\n`;
  
  // Fonction findMany (getAll)
  content += `export async function getAll${modelName}s() {\n`;
  content += `  try {\n`;
  content += `    return await prisma.${camelName}.findMany({\n`;
  content += `      include: {\n`;
  content += `        // Ajoutez ici les relations √† inclure si n√©cessaire\n`;
  content += `      },\n`;
  content += `      orderBy: {\n`;
  content += `        createdAt: 'desc'\n`;
  content += `      }\n`;
  content += `    });\n`;
  content += `  } catch (error) {\n`;
  content += `    console.error('Erreur getAll${modelName}s:', error);\n`;
  content += `    throw error;\n`;
  content += `  }\n`;
  content += `}\n\n`;
  
  // === FONCTIONS DE CR√âATION ===
  
  content += `export async function create${modelName}(data: any) {\n`;
  content += `  try {\n`;
  content += `    return await prisma.${camelName}.create({ \n`;
  content += `      data,\n`;
  content += `      include: {\n`;
  content += `        // Ajoutez ici les relations √† inclure si n√©cessaire\n`;
  content += `      }\n`;
  content += `    });\n`;
  content += `  } catch (error) {\n`;
  content += `    console.error('Erreur create${modelName}:', error);\n`;
  content += `    throw error;\n`;
  content += `  }\n`;
  content += `}\n\n`;
  
  // === FONCTIONS DE MISE √Ä JOUR ===
  
  content += `export async function update${modelName}(id: string, data: any) {\n`;
  content += `  try {\n`;
  content += `    return await prisma.${camelName}.update({ \n`;
  content += `      where: { id: id },\n`;
  content += `      data,\n`;
  content += `      include: {\n`;
  content += `        // Ajoutez ici les relations √† inclure si n√©cessaire\n`;
  content += `      }\n`;
  content += `    });\n`;
  content += `  } catch (error) {\n`;
  content += `    console.error('Erreur update${modelName}:', error);\n`;
  content += `    throw error;\n`;
  content += `  }\n`;
  content += `}\n\n`;
  
  // === FONCTIONS DE SUPPRESSION ===
  
  content += `export async function delete${modelName}(id: string) {\n`;
  content += `  try {\n`;
  content += `    return await prisma.${camelName}.delete({ \n`;
  content += `      where: { id: id }\n`;
  content += `    });\n`;
  content += `  } catch (error) {\n`;
  content += `    console.error('Erreur delete${modelName}:', error);\n`;
  content += `    throw error;\n`;
  content += `  }\n`;
  content += `}\n\n`;
  
  // === ALIASES POUR COMPATIBILIT√â ===
  
  // Ajouter des aliases pour les anciennes fonctions data.ts
  const aliases = {
    'User': ['getUsers', 'addUser'],
    'Host': ['getHosts', 'addHost'],
    'Client': ['getClients', 'addClient'],
    'Order': ['getOrders', 'addOrder'],
    'Service': ['getServices', 'addService'],
    'Reservation': ['getReservations', 'addReservation'],
    'Site': ['getSites'],
    'RoomOrTable': ['getRoomsOrTables'],
    'Tag': ['getTags'],
    'MenuCard': ['getMenuCards']
  };
  
  if (aliases[modelName]) {
    content += `// Aliases pour compatibilit√© avec data.ts\n`;
    aliases[modelName].forEach(alias => {
      if (alias.startsWith('get') && alias.endsWith('s')) {
        content += `export const ${alias} = getAll${modelName}s;\n`;
      } else if (alias.startsWith('add')) {
        content += `export const ${alias} = create${modelName};\n`;
      }
    });
    content += `\n`;
  }
});

// Ajouter des fonctions utilitaires
content += `// ============================================
// FONCTIONS UTILITAIRES
// ============================================

export async function connectToDatabase() {
  try {
    await prisma.$connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† la base:', error);
    return false;
  }
}

export async function disconnectFromDatabase() {
  try {
    await prisma.$disconnect();
    console.log('‚úÖ D√©connexion de la base de donn√©es');
  } catch (error) {
    console.error('‚ùå Erreur lors de la d√©connexion:', error);
  }
}

// Fonction de test de sant√© de la base
export async function healthCheck() {
  try {
    await prisma.$queryRaw\`SELECT 1\`;
    return { status: 'ok', timestamp: new Date().toISOString() };
  } catch (error) {
    return { status: 'error', error: error.message, timestamp: new Date().toISOString() };
  }
}
`;

// Cr√©er le r√©pertoire de destination s'il n'existe pas
const outputDir = path.dirname(outputPath);
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
  console.log(`üìÅ R√©pertoire cr√©√©: ${outputDir}`);
}

// √âcrire le fichier
try {
  fs.writeFileSync(outputPath, content, 'utf-8');
  console.log('‚úÖ prisma-service.ts g√©n√©r√© avec succ√®s');
  console.log(`üìÅ Fichier cr√©√©: ${outputPath}`);
  console.log(`üìä Fonctions g√©n√©r√©es pour ${modelNames.length} mod√®les:`);
  
  // R√©sum√© des fonctions g√©n√©r√©es
  modelNames.forEach(model => {
    console.log(`  - get${model}ById, getAll${model}s, create${model}, update${model}, delete${model}`);
  });
  
  console.log(`\nüéâ Total: ${modelNames.length * 5} fonctions CRUD g√©n√©r√©es !`);
  
} catch (error) {
  console.error('‚ùå Erreur lors de l\'√©criture du fichier:', error);
  process.exit(1);
}
