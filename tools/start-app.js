const { spawn, execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const http = require('http');

// ====================================
// START APP DYNAMIQUE - PIPELINE UNIVERSEL
// ====================================

console.log('üöÄ D√©marrage application dynamique - Pipeline Universel');

class AppStarter {
  constructor() {
    this.config = null;
    this.port = 3000;
    this.appName = 'Application';
    this.baseUrl = 'http://localhost:3000';
    this.environment = 'development';
    this.processes = [];
    
    this.loadConfiguration();
  }
  
  // ====================================
  // CHARGEMENT CONFIGURATION DYNAMIQUE
  // ====================================
  
  loadConfiguration() {
    try {
      const configPath = path.join(process.cwd(), '.project-config.json');
      const envPath = path.join(process.cwd(), '.env');
      
      if (!fs.existsSync(configPath)) {
        console.log('‚ö†Ô∏è Configuration .project-config.json manquante - utilisation valeurs par d√©faut');
        this.useDefaultConfiguration();
        return;
      }
      
      this.config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
      
      // Extraire les valeurs de configuration
      this.port = this.config.app?.port || 3000;
      this.appName = this.config.app?.name || 'Application';
      this.baseUrl = this.config.app?.baseUrl || `http://localhost:${this.port}`;
      this.environment = this.config.app?.environment || 'development';
      
      // Charger les variables d'environnement si disponibles
      if (fs.existsSync(envPath)) {
        this.loadEnvironmentVariables(envPath);
      }
      
      console.log(`üìã Configuration charg√©e: ${this.appName}`);
      console.log(`üöÄ Port configur√©: ${this.port}`);
      console.log(`üåê URL: ${this.baseUrl}`);
      console.log(`üîß Environnement: ${this.environment}`);
      
    } catch (error) {
      console.error('‚ùå Erreur chargement configuration:', error.message);
      console.log('üí° Utilisation configuration par d√©faut');
      this.useDefaultConfiguration();
    }
  }
  
  useDefaultConfiguration() {
    this.port = 3000;
    this.appName = 'Next.js Application';
    this.baseUrl = `http://localhost:${this.port}`;
    this.environment = 'development';
    
    console.log('üìã Configuration par d√©faut:');
    console.log(`   üöÄ Port: ${this.port}`);
    console.log(`   üìÅ App: ${this.appName}`);
    console.log(`   üåê URL: ${this.baseUrl}`);
  }
  
  loadEnvironmentVariables(envPath) {
    try {
      const envContent = fs.readFileSync(envPath, 'utf-8');
      const envVars = {};
      
      envContent.split('\n').forEach(line => {
        const [key, value] = line.split('=');
        if (key && value) {
          const cleanKey = key.trim();
          const cleanValue = value.trim().replace(/['"]/g, '');
          envVars[cleanKey] = cleanValue;
          process.env[cleanKey] = cleanValue;
        }
      });
      
      // Override avec les variables d'environnement si d√©finies
      if (envVars.PORT) {
        this.port = parseInt(envVars.PORT) || this.port;
      }
      if (envVars.BASE_URL) {
        this.baseUrl = envVars.BASE_URL;
      }
      if (envVars.NODE_ENV) {
        this.environment = envVars.NODE_ENV;
      }
      
      console.log('‚úÖ Variables d\'environnement charg√©es');
      
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur chargement .env:', error.message);
    }
  }
  
  // ====================================
  // V√âRIFICATION PORT DISPONIBLE
  // ====================================
  
  async checkPortAvailability() {
    console.log(`\nüîç V√©rification disponibilit√© port ${this.port}...`);
    
    return new Promise((resolve) => {
      const server = http.createServer();
      
      server.listen(this.port, () => {
        server.close(() => {
          console.log(`‚úÖ Port ${this.port} disponible`);
          resolve(true);
        });
      });
      
      server.on('error', (error) => {
        if (error.code === 'EADDRINUSE') {
          console.log(`‚ö†Ô∏è Port ${this.port} d√©j√† utilis√©`);
          resolve(false);
        } else {
          console.log(`‚ùå Erreur port ${this.port}:`, error.message);
          resolve(false);
        }
      });
    });
  }
  
  // ====================================
  // GESTION PROCESSUS EXISTANTS
  // ====================================
  
  async handleExistingProcesses() {
    console.log('\nüîç V√©rification processus existants...');
    
    try {
      // V√©rifier les processus Next.js existants
      const processes = execSync('ps aux | grep -E "(next|node.*start)" | grep -v grep', { 
        encoding: 'utf-8' 
      }).trim();
      
      if (processes) {
        console.log('üìä Processus Next.js d√©tect√©s:');
        processes.split('\n').forEach(proc => {
          if (proc.includes(':' + this.port) || proc.includes('next')) {
            console.log(`   üîÑ ${proc.substring(0, 80)}...`);
          }
        });
        
        const shouldKill = await this.askUserConfirmation(
          `Arr√™ter les processus existants sur le port ${this.port} ? (y/N): `
        );
        
        if (shouldKill) {
          await this.killExistingProcesses();
        }
      } else {
        console.log('‚úÖ Aucun processus conflictuel d√©tect√©');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible de v√©rifier les processus existants');
    }
  }
  
  async killExistingProcesses() {
    try {
      // Tuer les processus utilisant le port
      execSync(`lsof -ti:${this.port} | xargs kill -9 2>/dev/null || true`);
      
      // Attendre un peu
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log(`‚úÖ Processus sur port ${this.port} arr√™t√©s`);
      
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur arr√™t processus:', error.message);
    }
  }
  
  askUserConfirmation(question) {
    return new Promise((resolve) => {
      const readline = require('readline').createInterface({
        input: process.stdin,
        output: process.stdout
      });
      
      readline.question(question, (answer) => {
        readline.close();
        resolve(answer.toLowerCase() === 'y');
      });
    });
  }
  
  // ====================================
  // D√âMARRAGE APPLICATION
  // ====================================
  
  async startApplication() {
    console.log(`\nüöÄ D√©marrage ${this.appName}...`);
    
    // V√©rifier que les fichiers n√©cessaires existent
    if (!this.checkRequiredFiles()) {
      return false;
    }
    
    // D√©finir les variables d'environnement
    const env = {
      ...process.env,
      PORT: this.port.toString(),
      NODE_ENV: this.environment,
      APP_NAME: this.appName,
      BASE_URL: this.baseUrl
    };
    
    // D√©finir la commande de d√©marrage selon l'environnement
    const startCommand = this.getStartCommand();
    
    console.log(`üìã Commande: ${startCommand.cmd} ${startCommand.args.join(' ')}`);
    console.log(`üîß Environnement: ${this.environment}`);
    console.log(`üöÄ Port: ${this.port}`);
    
    try {
      // D√©marrer l'application
      const app = spawn(startCommand.cmd, startCommand.args, {
        stdio: ['inherit', 'pipe', 'pipe'],
        env: env,
        cwd: process.cwd()
      });
      
      this.processes.push(app);
      
      // G√©rer la sortie
      app.stdout.on('data', (data) => {
        const output = data.toString();
        
        // Filtrer et afficher les messages importants
        if (output.includes('ready') || 
            output.includes('started') || 
            output.includes('listening') ||
            output.includes('Local:') ||
            output.includes(`${this.port}`)) {
          console.log(`üìü ${output.trim()}`);
        }
      });
      
      app.stderr.on('data', (data) => {
        const error = data.toString();
        
        // Filtrer les erreurs importantes
        if (!error.includes('warn') && !error.includes('[WARN]')) {
          console.error(`‚ö†Ô∏è ${error.trim()}`);
        }
      });
      
      // G√©rer la fin du processus
      app.on('close', (code) => {
        if (code === 0) {
          console.log(`‚úÖ ${this.appName} arr√™t√© proprement`);
        } else {
          console.log(`‚ùå ${this.appName} arr√™t√© avec erreur (code: ${code})`);
        }
      });
      
      app.on('error', (error) => {
        console.error(`‚ùå Erreur d√©marrage ${this.appName}:`, error.message);
      });
      
      // Attendre que l'application soit pr√™te
      const isReady = await this.waitForAppReady();
      
      if (isReady) {
        this.displaySuccessMessage();
        return true;
      } else {
        console.log('‚ö†Ô∏è Application d√©marr√©e mais pas de confirmation de disponibilit√©');
        return true;
      }
      
    } catch (error) {
      console.error('‚ùå Erreur d√©marrage application:', error.message);
      return false;
    }
  }
  
  checkRequiredFiles() {
    const requiredFiles = [
      'package.json'
    ];
    
    const optionalFiles = [
      'next.config.js',
      'src/app/layout.tsx',
      'src/app/page.tsx'
    ];
    
    // V√©rifier fichiers requis
    const missingRequired = requiredFiles.filter(file => !fs.existsSync(file));
    if (missingRequired.length > 0) {
      console.error(`‚ùå Fichiers requis manquants: ${missingRequired.join(', ')}`);
      return false;
    }
    
    // V√©rifier fichiers optionnels
    const missingOptional = optionalFiles.filter(file => !fs.existsSync(file));
    if (missingOptional.length > 0) {
      console.log(`‚ö†Ô∏è Fichiers optionnels manquants: ${missingOptional.join(', ')}`);
    }
    
    console.log('‚úÖ Fichiers requis pr√©sents');
    return true;
  }
  
  getStartCommand() {
    // V√©rifier le package.json pour les scripts disponibles
    let packageJson = {};
    try {
      packageJson = JSON.parse(fs.readFileSync('package.json', 'utf-8'));
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lecture package.json');
    }
    
    const scripts = packageJson.scripts || {};
    
    // Choisir la commande selon l'environnement et les scripts disponibles
    if (this.environment === 'production') {
      if (scripts.start) {
        return { cmd: 'npm', args: ['start'] };
      } else {
        return { cmd: 'npx', args: ['next', 'start', '-p', this.port.toString()] };
      }
    } else {
      if (scripts.dev) {
        return { cmd: 'npm', args: ['run', 'dev', '--', '-p', this.port.toString()] };
      } else {
        return { cmd: 'npx', args: ['next', 'dev', '-p', this.port.toString()] };
      }
    }
  }
  
  async waitForAppReady() {
    console.log('‚è≥ Attente disponibilit√© application...');
    
    const maxAttempts = 30; // 30 secondes
    let attempts = 0;
    
    while (attempts < maxAttempts) {
      try {
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Test de connexion HTTP
        const response = await this.testHttpConnection();
        if (response) {
          console.log('‚úÖ Application pr√™te et accessible');
          return true;
        }
        
        attempts++;
        process.stdout.write('.');
        
      } catch (error) {
        attempts++;
        process.stdout.write('.');
      }
    }
    
    console.log('\n‚è±Ô∏è Timeout atteint - application peut √™tre en cours de d√©marrage');
    return false;
  }
  
  testHttpConnection() {
    return new Promise((resolve) => {
      const request = http.get(this.baseUrl, (res) => {
        resolve(res.statusCode < 500);
      });
      
      request.on('error', () => {
        resolve(false);
      });
      
      request.setTimeout(2000, () => {
        request.destroy();
        resolve(false);
      });
    });
  }
  
  displaySuccessMessage() {
    console.log('\n' + '='.repeat(60));
    console.log('üéâ APPLICATION D√âMARR√âE AVEC SUCC√àS !');
    console.log('='.repeat(60));
    console.log(`üìÅ Application: ${this.appName}`);
    console.log(`üåê URL locale: ${this.baseUrl}`);
    console.log(`üöÄ Port: ${this.port}`);
    console.log(`üîß Environnement: ${this.environment}`);
    
    if (this.config) {
      console.log(`üë§ Admin: ${this.config.admin?.email || 'Non configur√©'}`);
      console.log(`üóÑÔ∏è Base: ${this.config.database?.name || 'Non configur√©e'}`);
    }
    
    console.log('\nüìã Commandes utiles:');
    console.log(`   üîó Ouvrir: open ${this.baseUrl}`);
    console.log('   üõë Arr√™ter: Ctrl+C ou pkill -f next');
    console.log(`   üìä Processus: lsof -i :${this.port}`);
    
    console.log('\nüí° Prochaines √©tapes:');
    console.log('   1. Ouvrez votre navigateur');
    console.log(`   2. Acc√©dez √† ${this.baseUrl}`);
    console.log('   3. Connectez-vous avec les credentials admin');
    
    console.log('='.repeat(60));
  }
  
  // ====================================
  // GESTION ARR√äT PROPRE
  // ====================================
  
  setupGracefulShutdown() {
    const shutdown = async (signal) => {
      console.log(`\nüõë Signal ${signal} re√ßu - Arr√™t en cours...`);
      
      // Arr√™ter tous les processus
      for (const proc of this.processes) {
        if (proc && !proc.killed) {
          console.log('üîÑ Arr√™t processus application...');
          proc.kill('SIGTERM');
          
          // Forcer l'arr√™t si n√©cessaire
          setTimeout(() => {
            if (!proc.killed) {
              console.log('üí• Arr√™t forc√© du processus');
              proc.kill('SIGKILL');
            }
          }, 5000);
        }
      }
      
      console.log('‚úÖ Arr√™t termin√©');
      process.exit(0);
    };
    
    process.on('SIGINT', () => shutdown('SIGINT'));
    process.on('SIGTERM', () => shutdown('SIGTERM'));
    process.on('SIGQUIT', () => shutdown('SIGQUIT'));
  }
  
  // ====================================
  // MONITORING ET SANT√â
  // ====================================
  
  async startHealthMonitoring() {
    console.log('\nüìä D√©marrage monitoring sant√© application...');
    
    const healthCheck = setInterval(async () => {
      const isHealthy = await this.checkApplicationHealth();
      
      if (!isHealthy) {
        console.log('‚ö†Ô∏è Application non responsive - V√©rification en cours...');
        
        // Tentative de red√©marrage automatique en d√©veloppement
        if (this.environment === 'development') {
          console.log('üîÑ Tentative red√©marrage automatique...');
          clearInterval(healthCheck);
          setTimeout(() => this.startApplication(), 5000);
        }
      }
    }, 60000); // V√©rification toutes les minutes
    
    // Arr√™ter le monitoring apr√®s 30 minutes en d√©veloppement
    if (this.environment === 'development') {
      setTimeout(() => {
        clearInterval(healthCheck);
        console.log('üìä Monitoring sant√© arr√™t√©');
      }, 30 * 60 * 1000);
    }
  }
  
  async checkApplicationHealth() {
    try {
      const response = await this.testHttpConnection();
      return response;
    } catch (error) {
      return false;
    }
  }
}

// ====================================
// POINT D'ENTR√âE
// ====================================

async function main() {
  const starter = new AppStarter();
  
  try {
    console.log('üöÄ D√©marrage application Next.js...\n');
    
    // Configuration arr√™t propre
    starter.setupGracefulShutdown();
    
    // V√©rifier disponibilit√© du port
    const portAvailable = await starter.checkPortAvailability();
    
    if (!portAvailable) {
      await starter.handleExistingProcesses();
      
      // Rev√©rifier apr√®s gestion des processus
      const nowAvailable = await starter.checkPortAvailability();
      if (!nowAvailable) {
        console.error(`‚ùå Port ${starter.port} toujours occup√© - Arr√™t`);
        process.exit(1);
      }
    }
    
    // D√©marrer l'application
    const success = await starter.startApplication();
    
    if (success) {
      // D√©marrer le monitoring en arri√®re-plan
      if (starter.environment === 'development') {
        setTimeout(() => starter.startHealthMonitoring(), 10000);
      }
      
      // Maintenir le processus actif
      console.log('\nüí´ Application en cours d\'ex√©cution...');
      console.log('   üí° Utilisez Ctrl+C pour arr√™ter\n');
      
      // Boucle principale
      const keepAlive = setInterval(() => {
        // Le processus reste actif
      }, 1000);
      
    } else {
      console.error('‚ùå √âchec d√©marrage application');
      process.exit(1);
    }
    
  } catch (error) {
    console.error('\n‚ùå Erreur fatale:');
    console.error(`   üí• ${error.message}`);
    
    // Informations de debug
    console.log('\nüîç Informations de debug:');
    console.log(`   üìÇ R√©pertoire: ${process.cwd()}`);
    console.log(`   üîß Node.js: ${process.version}`);
    console.log(`   üöÄ Port configur√©: ${starter.port}`);
    
    // V√©rifier les fichiers critiques
    const criticalFiles = [
      'package.json',
      '.project-config.json',
      '.env'
    ];
    
    criticalFiles.forEach(file => {
      const exists = fs.existsSync(path.join(process.cwd(), file));
      console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
    });
    
    console.log('\nüí° Pour r√©soudre:');
    console.log('   1. V√©rifiez la configuration dans .project-config.json');
    console.log('   2. V√©rifiez que le port est disponible');
    console.log('   3. Lancez: npm install');
    console.log('   4. V√©rifiez que Next.js est install√©');
    console.log('   5. Tentez: npx next build');
    
    process.exit(1);
  }
}

// ====================================
// EXPORT ET EX√âCUTION
// ====================================

if (require.main === module) {
  main();
}

module.exports = { 
  AppStarter, 
  main 
};