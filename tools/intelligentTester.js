#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const { execSync, spawn } = require('child_process');
const { ClaudeAPI } = require('./ai-infrastructure.js');

/**
 * üß† INTELLIGENT TESTER
 * G√©n√©ration et ex√©cution de tests automatiques avec IA
 */
class IntelligentTester {
  constructor() {
    this.claudeAPI = new ClaudeAPI();
    this.projectRoot = process.cwd();
    this.testsDir = path.join(this.projectRoot, '__tests__');
    this.testMetrics = {
      startTime: Date.now(),
      testsGenerated: 0,
      testsExecuted: 0,
      testsPassed: 0,
      testsFailed: 0,
      coverage: 0,
      edgeCasesFound: 0,
      performanceIssues: 0
    };
    
    // Configuration testing
    this.testConfig = this.loadTestConfig();
    
    // Chargement analyse projet
    this.projectAnalysis = this.loadProjectAnalysis();
    
    // Types de tests support√©s
    this.testTypes = {
      unit: 'Tests unitaires',
      integration: 'Tests d\'int√©gration',
      e2e: 'Tests end-to-end',
      performance: 'Tests de performance',
      security: 'Tests de s√©curit√©',
      accessibility: 'Tests d\'accessibilit√©'
    };
  }

  /**
   * üéØ TESTING INTELLIGENT COMPLET
   */
  async intelligentTesting() {
    console.log('üß™ D√©marrage Intelligent Tester...');
    
    try {
      // 1. Analyse code pour g√©n√©ration tests
      const codeAnalysis = await this.analyzeCodeForTesting();
      
      // 2. G√©n√©ration tests automatiques
      const generatedTests = await this.generateIntelligentTests(codeAnalysis);
      
      // 3. D√©tection edge cases avec IA
      const edgeCases = await this.detectEdgeCases(codeAnalysis);
      
      // 4. Configuration environnement test
      await this.setupTestEnvironment();
      
      // 5. Ex√©cution tests automatiques
      const testResults = await this.executeTests();
      
      // 6. Analyse coverage
      const coverageAnalysis = await this.analyzeCoverage();
      
      // 7. Tests performance automatiques
      const performanceTests = await this.runPerformanceTests();
      
      // 8. Validation accessibilit√©
      const a11yTests = await this.runAccessibilityTests();
      
      // 9. G√©n√©ration rapport complet
      this.generateTestingReport({
        codeAnalysis,
        generatedTests,
        edgeCases,
        testResults,
        coverageAnalysis,
        performanceTests,
        a11yTests
      });
      
      console.log('‚úÖ Testing intelligent termin√© !');
      return true;
      
    } catch (error) {
      console.error('‚ùå Erreur Intelligent Tester:', error.message);
      throw error;
    }
  }

  /**
   * üîç ANALYSE CODE POUR TESTS
   */
  async analyzeCodeForTesting() {
    console.log('  üîç Analyse code pour g√©n√©ration tests...');
    
    const analysis = {
      components: [],
      hooks: [],
      utilities: [],
      apiRoutes: [],
      types: [],
      complexity: {}
    };
    
    // Analyse composants React
    analysis.components = await this.analyzeReactComponents();
    
    // Analyse hooks personnalis√©s
    analysis.hooks = await this.analyzeCustomHooks();
    
    // Analyse fonctions utilitaires
    analysis.utilities = await this.analyzeUtilityFunctions();
    
    // Analyse routes API
    analysis.apiRoutes = await this.analyzeApiRoutes();
    
    // Analyse types TypeScript
    analysis.types = await this.analyzeTypeDefinitions();
    
    // Calcul complexit√©
    analysis.complexity = await this.calculateComplexityMetrics(analysis);
    
    console.log(`    ‚úì ${analysis.components.length} composants analys√©s`);
    console.log(`    ‚úì ${analysis.hooks.length} hooks analys√©s`);
    console.log(`    ‚úì ${analysis.utilities.length} utilitaires analys√©s`);
    console.log(`    ‚úì ${analysis.apiRoutes.length} routes API analys√©es`);
    
    return analysis;
  }

  /**
   * ü§ñ G√âN√âRATION TESTS INTELLIGENTS
   */
  async generateIntelligentTests(codeAnalysis) {
    console.log('  ü§ñ G√©n√©ration tests intelligents...');
    
    const generatedTests = {
      unit: [],
      integration: [],
      e2e: [],
      performance: []
    };
    
    // G√©n√©ration tests unitaires pour composants
    for (const component of codeAnalysis.components) {
      const unitTests = await this.generateComponentTests(component);
      generatedTests.unit.push(...unitTests);
    }
    
    // G√©n√©ration tests hooks
    for (const hook of codeAnalysis.hooks) {
      const hookTests = await this.generateHookTests(hook);
      generatedTests.unit.push(...hookTests);
    }
    
    // G√©n√©ration tests API
    for (const route of codeAnalysis.apiRoutes) {
      const apiTests = await this.generateApiTests(route);
      generatedTests.integration.push(...apiTests);
    }
    
    // G√©n√©ration tests E2E
    const e2eTests = await this.generateE2ETests(codeAnalysis);
    generatedTests.e2e.push(...e2eTests);
    
    // G√©n√©ration tests performance
    const perfTests = await this.generatePerformanceTests(codeAnalysis);
    generatedTests.performance.push(...perfTests);
    
    this.testMetrics.testsGenerated = Object.values(generatedTests).flat().length;
    
    console.log(`    ‚úì ${this.testMetrics.testsGenerated} tests g√©n√©r√©s`);
    return generatedTests;
  }

  /**
   * ‚öõÔ∏è G√âN√âRATION TESTS COMPOSANTS
   */
  async generateComponentTests(component) {
    const testPrompt = `
G√©n√®re des tests unitaires complets pour ce composant React :

COMPOSANT:
${JSON.stringify(component, null, 2)}

CODE:
${component.code.substring(0, 3000)}

G√©n√®re tests Jest + React Testing Library :
1. Tests de rendu (render, snapshots)
2. Tests interactions utilisateur (clicks, inputs)
3. Tests props (required, optional, edge cases)
4. Tests √©tats internes (useState, useEffect)
5. Tests accessibility (ARIA, keyboard nav)
6. Tests erreurs (error boundaries, invalid props)

Retourne code complet des tests avec :
- Imports n√©cessaires
- Mocks appropri√©s
- Tests cases exhaustifs
- Assertions pertinentes
- TypeScript typ√©
`;

    try {
      const testsCode = await this.claudeAPI.generateWithCache(
        `component-tests-${component.name}`,
        testPrompt,
        'Tu g√©n√®res des tests React complets et robustes avec Jest et React Testing Library'
      );

      // Sauvegarde du fichier test
      const testFileName = `${component.name}.test.tsx`;
      const testFilePath = path.join(this.testsDir, 'components', testFileName);
      
      this.ensureDirectoryExists(path.dirname(testFilePath));
      fs.writeFileSync(testFilePath, testsCode);

      return [{
        type: 'unit',
        component: component.name,
        file: testFilePath,
        description: `Tests unitaires pour ${component.name}`,
        generated: true
      }];

    } catch (error) {
      console.warn(`    ‚ö†Ô∏è Erreur g√©n√©ration tests ${component.name}: ${error.message}`);
      return [];
    }
  }

  /**
   * ü™ù G√âN√âRATION TESTS HOOKS
   */
  async generateHookTests(hook) {
    const testPrompt = `
G√©n√®re des tests pour ce hook React personnalis√© :

HOOK:
${JSON.stringify(hook, null, 2)}

CODE:
${hook.code}

G√©n√®re tests avec @testing-library/react-hooks :
1. Tests fonctionnement de base
2. Tests avec diff√©rents param√®tres
3. Tests edge cases (valeurs null, undefined, extr√™mes)
4. Tests performance (re-renders, memoization)
5. Tests erreurs et recovery
6. Tests async (si applicable)

Code complet avec TypeScript et mocks appropri√©s.
`;

    try {
      const testsCode = await this.claudeAPI.generateWithCache(
        `hook-tests-${hook.name}`,
        testPrompt,
        'Tu g√©n√®res des tests hooks React complets avec toutes les edge cases'
      );

      const testFileName = `${hook.name}.test.ts`;
      const testFilePath = path.join(this.testsDir, 'hooks', testFileName);
      
      this.ensureDirectoryExists(path.dirname(testFilePath));
      fs.writeFileSync(testFilePath, testsCode);

      return [{
        type: 'unit',
        hook: hook.name,
        file: testFilePath,
        description: `Tests hook ${hook.name}`,
        generated: true
      }];

    } catch (error) {
      console.warn(`    ‚ö†Ô∏è Erreur g√©n√©ration tests hook ${hook.name}: ${error.message}`);
      return [];
    }
  }

  /**
   * üîç D√âTECTION EDGE CASES
   */
  async detectEdgeCases(codeAnalysis) {
    console.log('  üîç D√©tection edge cases avec IA...');
    
    const edgeCasesPrompt = `
Analyse ce code pour identifier tous les edge cases possibles :

ANALYSE CODE:
${JSON.stringify(codeAnalysis, null, 2)}

Identifie edge cases critiques :
1. Valeurs limites (null, undefined, empty, tr√®s grandes)
2. √âtats invalides (network errors, loading states)
3. Interactions utilisateur complexes (rapid clicks, concurrent operations)
4. Donn√©es corrompues ou malform√©es
5. Conditions de course (race conditions)
6. Limites syst√®me (memory, performance)
7. Cas d'erreur non g√©r√©s

Pour chaque edge case, sp√©cifie :
- Description du cas
- Impact potentiel
- Test √† g√©n√©rer
- Priorit√© (Critical/High/Medium/Low)

Retourne JSON avec edge cases d√©taill√©s.
`;

    try {
      const edgeCases = await this.claudeAPI.analyzeWithCache(
        'edge-cases-detection',
        edgeCasesPrompt,
        'Tu es un expert QA qui trouve tous les edge cases possibles dans le code'
      );

      this.testMetrics.edgeCasesFound = edgeCases.cases?.length || 0;
      
      // G√©n√©ration tests pour edge cases critiques
      const criticalCases = edgeCases.cases?.filter(c => c.priority === 'Critical') || [];
      
      for (const edgeCase of criticalCases) {
        await this.generateEdgeCaseTest(edgeCase);
      }

      console.log(`    ‚úì ${this.testMetrics.edgeCasesFound} edge cases d√©tect√©s`);
      return edgeCases;

    } catch (error) {
      console.warn('    ‚ö†Ô∏è Erreur d√©tection edge cases:', error.message);
      return { cases: [] };
    }
  }

  /**
   * ‚öôÔ∏è CONFIGURATION ENVIRONNEMENT TEST
   */
  async setupTestEnvironment() {
    console.log('  ‚öôÔ∏è Configuration environnement test...');
    
    // Cr√©ation structure dossiers tests
    const testDirs = [
      this.testsDir,
      path.join(this.testsDir, 'components'),
      path.join(this.testsDir, 'hooks'),
      path.join(this.testsDir, 'utils'),
      path.join(this.testsDir, 'api'),
      path.join(this.testsDir, 'e2e'),
      path.join(this.testsDir, 'performance')
    ];
    
    testDirs.forEach(dir => this.ensureDirectoryExists(dir));
    
    // Configuration Jest
    await this.createJestConfig();
    
    // Configuration Testing Library
    await this.createTestingLibrarySetup();
    
    // Configuration MSW (Mock Service Worker)
    await this.createMswSetup();
    
    // Configuration Playwright pour E2E
    await this.createPlaywrightConfig();
    
    console.log('    ‚úì Environnement test configur√©');
  }

  /**
   * üèÉ EX√âCUTION TESTS
   */
  async executeTests() {
    console.log('  üèÉ Ex√©cution tests automatiques...');
    
    const results = {
      unit: await this.runUnitTests(),
      integration: await this.runIntegrationTests(),
      e2e: await this.runE2ETests()
    };
    
    // Calcul m√©triques globales
    const allResults = Object.values(results).flat();
    this.testMetrics.testsExecuted = allResults.length;
    this.testMetrics.testsPassed = allResults.filter(r => r.passed).length;
    this.testMetrics.testsFailed = allResults.filter(r => !r.passed).length;
    
    console.log(`    ‚úì ${this.testMetrics.testsExecuted} tests ex√©cut√©s`);
    console.log(`    ‚úÖ ${this.testMetrics.testsPassed} r√©ussis`);
    console.log(`    ‚ùå ${this.testMetrics.testsFailed} √©chou√©s`);
    
    return results;
  }

  /**
   * üìä ANALYSE COVERAGE
   */
  async analyzeCoverage() {
    console.log('  üìä Analyse coverage...');
    
    try {
      // Ex√©cution Jest avec coverage
      const coverageOutput = execSync('npx jest --coverage --coverageReporters=json', {
        cwd: this.projectRoot,
        stdio: 'pipe'
      }).toString();
      
      // Lecture rapport coverage
      const coveragePath = path.join(this.projectRoot, 'coverage', 'coverage-final.json');
      
      if (fs.existsSync(coveragePath)) {
        const coverageData = JSON.parse(fs.readFileSync(coveragePath, 'utf-8'));
        
        // Calcul coverage global
        const summary = this.calculateCoverageSummary(coverageData);
        this.testMetrics.coverage = summary.percentage;
        
        // Analyse d√©taill√©e avec IA
        const coverageAnalysis = await this.analyzeCoverageWithAI(coverageData, summary);
        
        console.log(`    ‚úì Coverage: ${summary.percentage.toFixed(1)}%`);
        return { summary, detailed: coverageData, analysis: coverageAnalysis };
      }
      
    } catch (error) {
      console.warn('    ‚ö†Ô∏è Erreur analyse coverage:', error.message);
    }
    
    return { summary: { percentage: 0 }, detailed: {}, analysis: {} };
  }

  /**
   * ‚ö° TESTS PERFORMANCE
   */
  async runPerformanceTests() {
    console.log('  ‚ö° Tests performance...');
    
    const performanceResults = [];
    
    try {
      // Tests performance composants
      const componentPerfTests = await this.runComponentPerformanceTests();
      performanceResults.push(...componentPerfTests);
      
      // Tests performance API
      const apiPerfTests = await this.runApiPerformanceTests();
      performanceResults.push(...apiPerfTests);
      
      // Tests bundle size
      const bundleTests = await this.runBundleSizeTests();
      performanceResults.push(...bundleTests);
      
      // Lighthouse automatique
      const lighthouseResults = await this.runLighthouseTests();
      performanceResults.push(...lighthouseResults);
      
      this.testMetrics.performanceIssues = performanceResults.filter(r => r.status === 'warning' || r.status === 'error').length;
      
      console.log(`    ‚úì ${performanceResults.length} tests performance ex√©cut√©s`);
      
    } catch (error) {
      console.warn('    ‚ö†Ô∏è Erreur tests performance:', error.message);
    }
    
    return performanceResults;
  }

  /**
   * ‚ôø TESTS ACCESSIBILIT√â
   */
  async runAccessibilityTests() {
    console.log('  ‚ôø Tests accessibilit√©...');
    
    const a11yResults = [];
    
    try {
      // Tests axe-core automatiques
      const axeTests = await this.runAxeTests();
      a11yResults.push(...axeTests);
      
      // Tests keyboard navigation
      const keyboardTests = await this.runKeyboardTests();
      a11yResults.push(...keyboardTests);
      
      // Tests screen reader
      const screenReaderTests = await this.runScreenReaderTests();
      a11yResults.push(...screenReaderTests);
      
      console.log(`    ‚úì ${a11yResults.length} tests accessibilit√© ex√©cut√©s`);
      
    } catch (error) {
      console.warn('    ‚ö†Ô∏è Erreur tests accessibilit√©:', error.message);
    }
    
    return a11yResults;
  }

  /**
   * üîß M√âTHODES UTILITAIRES
   */
  loadTestConfig() {
    return {
      coverage: {
        threshold: 80,
        include: ['src/**/*.{ts,tsx}'],
        exclude: ['**/*.test.{ts,tsx}', '**/*.stories.{ts,tsx}']
      },
      performance: {
        maxRenderTime: 100,
        maxBundleSize: 500000,
        lighthouseThresholds: {
          performance: 90,
          accessibility: 95,
          bestPractices: 90,
          seo: 85
        }
      },
      e2e: {
        baseUrl: 'http://localhost:3000',
        timeout: 30000
      }
    };
  }

  loadProjectAnalysis() {
    try {
      const analysisPath = path.join(this.projectRoot, 'data', 'ai-memory', 'latest-analysis.json');
      if (fs.existsSync(analysisPath)) {
        return JSON.parse(fs.readFileSync(analysisPath, 'utf-8'));
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Impossible de charger l\'analyse projet');
    }
    return null;
  }

  async analyzeReactComponents() {
    const components = [];
    const componentsDir = path.join(this.projectRoot, 'src', 'components');
    
    if (fs.existsSync(componentsDir)) {
      const componentFiles = this.getFilesRecursive(componentsDir, ['.tsx', '.jsx']);
      
      for (const file of componentFiles) {
        const component = await this.analyzeComponentFile(file);
        if (component) components.push(component);
      }
    }
    
    return components;
  }

  async analyzeComponentFile(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      const componentName = path.basename(filePath, path.extname(filePath));
      
      // Analyse basique du composant
      const analysis = {
        name: componentName,
        file: path.relative(this.projectRoot, filePath),
        code: content,
        props: this.extractProps(content),
        hooks: this.extractHooks(content),
        complexity: this.calculateFileComplexity(content),
        hasTests: this.hasExistingTests(componentName)
      };
      
      return analysis;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur analyse composant ${path.basename(filePath)}`);
      return null;
    }
  }

  async analyzeCustomHooks() {
    const hooks = [];
    const hooksDir = path.join(this.projectRoot, 'src', 'hooks');
    
    if (fs.existsSync(hooksDir)) {
      const hookFiles = this.getFilesRecursive(hooksDir, ['.ts', '.tsx']);
      
      for (const file of hookFiles) {
        const hook = await this.analyzeHookFile(file);
        if (hook) hooks.push(hook);
      }
    }
    
    return hooks;
  }

  async analyzeHookFile(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      const hookName = path.basename(filePath, path.extname(filePath));
      
      if (!hookName.startsWith('use')) return null;
      
      return {
        name: hookName,
        file: path.relative(this.projectRoot, filePath),
        code: content,
        dependencies: this.extractHookDependencies(content),
        returnType: this.extractReturnType(content),
        complexity: this.calculateFileComplexity(content)
      };
    } catch (error) {
      return null;
    }
  }

  async analyzeUtilityFunctions() {
    // Analyse des fonctions utilitaires
    return [];
  }

  async analyzeApiRoutes() {
    const routes = [];
    const apiDirs = [
      path.join(this.projectRoot, 'src', 'app', 'api'),
      path.join(this.projectRoot, 'pages', 'api')
    ];
    
    for (const apiDir of apiDirs) {
      if (fs.existsSync(apiDir)) {
        const apiFiles = this.getFilesRecursive(apiDir, ['.ts', '.js']);
        
        for (const file of apiFiles) {
          const route = await this.analyzeApiFile(file);
          if (route) routes.push(route);
        }
      }
    }
    
    return routes;
  }

  async analyzeApiFile(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      const routePath = this.extractApiRoutePath(filePath);
      
      return {
        path: routePath,
        file: path.relative(this.projectRoot, filePath),
        code: content,
        methods: this.extractHttpMethods(content),
        middlewares: this.extractMiddlewares(content)
      };
    } catch (error) {
      return null;
    }
  }

  async analyzeTypeDefinitions() {
    const types = [];
    const typesPath = path.join(this.projectRoot, 'src', 'types', 'types.ts');
    
    if (fs.existsSync(typesPath)) {
      const content = fs.readFileSync(typesPath, 'utf-8');
      // Extraction des interfaces et types
      const interfaceMatches = content.matchAll(/export interface (\w+)/g);
      
      for (const match of interfaceMatches) {
        types.push({
          name: match[1],
          type: 'interface'
        });
      }
    }
    
    return types;
  }

  async calculateComplexityMetrics(analysis) {
    // Calcul m√©triques de complexit√©
    return {
      cyclomatic: 'medium',
      cognitive: 'low',
      testability: 'high'
    };
  }

  // M√©thodes d'extraction et analyse
  extractProps(content) {
    // Extraction des props d'un composant
    const propsMatch = content.match(/interface\s+\w*Props\s*{([^}]+)}/);
    return propsMatch ? propsMatch[1].split('\n').filter(line => line.trim()) : [];
  }

  extractHooks(content) {
    // Extraction des hooks utilis√©s
    const hookMatches = content.matchAll(/use\w+\(/g);
    return Array.from(hookMatches).map(match => match[0].slice(0, -1));
  }

  calculateFileComplexity(content) {
    // Calcul simplifi√© de complexit√©
    const lines = content.split('\n').length;
    const functions = (content.match(/function|const.*=.*=>/g) || []).length;
    
    if (lines > 200 || functions > 10) return 'high';
    if (lines > 100 || functions > 5) return 'medium';
    return 'low';
  }

  hasExistingTests(componentName) {
    const testPaths = [
      path.join(this.testsDir, 'components', `${componentName}.test.tsx`),
      path.join(this.testsDir, 'components', `${componentName}.test.ts`),
      path.join(this.projectRoot, 'src', 'components', `${componentName}.test.tsx`)
    ];
    
    return testPaths.some(testPath => fs.existsSync(testPath));
  }

  extractHookDependencies(content) {
    // Extraction des d√©pendances d'un hook
    return [];
  }

  extractReturnType(content) {
    // Extraction du type de retour
    return 'unknown';
  }

  extractApiRoutePath(filePath) {
    // Extraction du chemin API depuis le nom de fichier
    const relativePath = path.relative(path.join(this.projectRoot, 'src', 'app', 'api'), filePath);
    return '/' + relativePath.replace(/\.(ts|js)$/, '').replace(/\\/g, '/');
  }

  extractHttpMethods(content) {
    // Extraction des m√©thodes HTTP
    const methods = [];
    const methodPatterns = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'];
    
    methodPatterns.forEach(method => {
      if (content.includes(`export async function ${method}`) || 
          content.includes(`export function ${method}`)) {
        methods.push(method);
      }
    });
    
    return methods;
  }

  extractMiddlewares(content) {
    // Extraction des middlewares
    return [];
  }

  getFilesRecursive(dir, extensions) {
    let files = [];
    
    try {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory() && !item.startsWith('.') && !item.startsWith('node_modules')) {
          files = files.concat(this.getFilesRecursive(fullPath, extensions));
        } else if (stat.isFile() && extensions.includes(path.extname(item))) {
          files.push(fullPath);
        }
      }
    } catch (error) {
      // Ignore les erreurs de lecture
    }
    
    return files;
  }

  ensureDirectoryExists(dir) {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  }

  // M√©thodes de g√©n√©ration et configuration
  async generateEdgeCaseTest(edgeCase) {
    // G√©n√©ration test pour edge case sp√©cifique
  }

  async createJestConfig() {
    const jestConfig = `
module.exports = {
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/__tests__/setup.ts'],
  moduleNameMapping: {
    '^@/(.*)$': '<rootDir>/src/$1',
  },
  collectCoverageFrom: [
    'src/**/*.{ts,tsx}',
    '!src/**/*.d.ts',
    '!src/**/*.stories.{ts,tsx}',
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80,
    },
  },
};
`;
    
    const configPath = path.join(this.projectRoot, 'jest.config.js');
    if (!fs.existsSync(configPath)) {
      fs.writeFileSync(configPath, jestConfig);
    }
  }

  async createTestingLibrarySetup() {
    const setupCode = `
import '@testing-library/jest-dom';
import { configure } from '@testing-library/react';

configure({ testIdAttribute: 'data-testid' });

// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
  constructor() {}
  observe() { return null; }
  disconnect() { return null; }
  unobserve() { return null; }
};
`;
    
    const setupPath = path.join(this.testsDir, 'setup.ts');
    if (!fs.existsSync(setupPath)) {
      fs.writeFileSync(setupPath, setupCode);
    }
  }

  async createMswSetup() {
    // Configuration Mock Service Worker
  }

  async createPlaywrightConfig() {
    // Configuration Playwright pour E2E
  }

  // M√©thodes d'ex√©cution tests
  async runUnitTests() {
    try {
      execSync('npx jest --testPathPattern=__tests__', {
        cwd: this.projectRoot,
        stdio: 'inherit'
      });
      return [{ type: 'unit', passed: true }];
    } catch (error) {
      return [{ type: 'unit', passed: false, error: error.message }];
    }
  }

  async runIntegrationTests() {
    // Ex√©cution tests d'int√©gration
    return [];
  }

  async runE2ETests() {
    // Ex√©cution tests E2E
    return [];
  }

  async runComponentPerformanceTests() {
    // Tests performance composants
    return [];
  }

  async runApiPerformanceTests() {
    // Tests performance API
    return [];
  }

  async runBundleSizeTests() {
    // Tests taille bundle
    return [];
  }

  async runLighthouseTests() {
    // Tests Lighthouse automatiques
    return [];
  }

  async runAxeTests() {
    // Tests axe-core accessibilit√©
    return [];
  }

  async runKeyboardTests() {
    // Tests navigation clavier
    return [];
  }

  async runScreenReaderTests() {
    // Tests screen reader
    return [];
  }

  calculateCoverageSummary(coverageData) {
    let totalStatements = 0;
    let coveredStatements = 0;
    let totalFunctions = 0;
    let coveredFunctions = 0;
    let totalBranches = 0;
    let coveredBranches = 0;
    let totalLines = 0;
    let coveredLines = 0;
    
    Object.values(coverageData).forEach(file => {
      if (file.s) { // statements
        totalStatements += Object.keys(file.s).length;
        coveredStatements += Object.values(file.s).filter(count => count > 0).length;
      }
      if (file.f) { // functions
        totalFunctions += Object.keys(file.f).length;
        coveredFunctions += Object.values(file.f).filter(count => count > 0).length;
      }
      if (file.b) { // branches
        Object.values(file.b).forEach(branch => {
          totalBranches += branch.length;
          coveredBranches += branch.filter(count => count > 0).length;
        });
      }
      if (file.statementMap) { // lines
        totalLines += Object.keys(file.statementMap).length;
        const coveredInFile = Object.keys(file.s || {}).filter(key => file.s[key] > 0).length;
        coveredLines += coveredInFile;
      }
    });
    
    const calculatePercentage = (covered, total) => total > 0 ? (covered / total) * 100 : 100;
    
    return {
      statements: {
        covered: coveredStatements,
        total: totalStatements,
        percentage: calculatePercentage(coveredStatements, totalStatements)
      },
      functions: {
        covered: coveredFunctions,
        total: totalFunctions,
        percentage: calculatePercentage(coveredFunctions, totalFunctions)
      },
      branches: {
        covered: coveredBranches,
        total: totalBranches,
        percentage: calculatePercentage(coveredBranches, totalBranches)
      },
      lines: {
        covered: coveredLines,
        total: totalLines,
        percentage: calculatePercentage(coveredLines, totalLines)
      },
      percentage: calculatePercentage(
        coveredStatements + coveredFunctions + coveredBranches + coveredLines,
        totalStatements + totalFunctions + totalBranches + totalLines
      )
    };
  }

  async analyzeCoverageWithAI(coverageData, summary) {
    const analysisPrompt = `
Analyse ce rapport de coverage pour identifier les points d'am√©lioration :

COVERAGE SUMMARY:
${JSON.stringify(summary, null, 2)}

COVERAGE DATA (√©chantillon):
${JSON.stringify(Object.entries(coverageData).slice(0, 3), null, 2)}

Analyse et recommande :
1. Fichiers/fonctions non couverts critiques
2. Branches conditionnelles manqu√©es importantes  
3. Edge cases probablement non test√©s
4. Zones de code complexe n√©cessitant plus de tests
5. Priorit√©s pour am√©liorer le coverage

Objectif : Coverage minimum 80% avec tests pertinents.
Retourne analyse JSON avec recommandations sp√©cifiques.
`;

    try {
      const analysis = await this.claudeAPI.analyzeWithCache(
        'coverage-analysis',
        analysisPrompt,
        'Tu analyses les rapports de test coverage pour optimiser la strat√©gie de test'
      );

      return analysis;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur analyse coverage IA:', error.message);
      return { recommendations: [] };
    }
  }

  async generateApiTests(route) {
    const testPrompt = `
G√©n√®re des tests d'int√©gration pour cette route API :

ROUTE API:
${JSON.stringify(route, null, 2)}

CODE:
${route.code.substring(0, 2000)}

G√©n√®re tests avec Supertest et Jest :
1. Tests m√©thodes HTTP (${route.methods.join(', ')})
2. Tests authentification/autorisation
3. Tests validation des entr√©es
4. Tests r√©ponses succ√®s (200, 201, etc.)
5. Tests gestion erreurs (400, 401, 404, 500)
6. Tests edge cases (donn√©es invalides, limites)
7. Tests performance (temps r√©ponse)

Code complet avec mocks database appropri√©s.
`;

    try {
      const testsCode = await this.claudeAPI.generateWithCache(
        `api-tests-${route.path.replace(/\//g, '-')}`,
        testPrompt,
        'Tu g√©n√®res des tests API complets avec Supertest couvrant tous les cas d\'usage'
      );

      const testFileName = `${route.path.replace(/\//g, '-')}.test.ts`;
      const testFilePath = path.join(this.testsDir, 'api', testFileName);
      
      this.ensureDirectoryExists(path.dirname(testFilePath));
      fs.writeFileSync(testFilePath, testsCode);

      return [{
        type: 'integration',
        api: route.path,
        file: testFilePath,
        description: `Tests API ${route.path}`,
        generated: true
      }];

    } catch (error) {
      console.warn(`    ‚ö†Ô∏è Erreur g√©n√©ration tests API ${route.path}: ${error.message}`);
      return [];
    }
  }

  async generateE2ETests(codeAnalysis) {
    const e2ePrompt = `
G√©n√®re des tests E2E pour cette application :

ANALYSE APPLICATION:
- ${codeAnalysis.components.length} composants
- ${codeAnalysis.apiRoutes.length} routes API
- Pages principales d√©tect√©es

ARCHITECTURE:
${JSON.stringify(this.projectAnalysis?.architecture || {}, null, 2)}

G√©n√®re tests Playwright E2E :
1. Tests parcours utilisateur complets
2. Tests formulaires (cr√©ation, modification)
3. Tests navigation entre pages
4. Tests responsive design
5. Tests cross-browser
6. Tests performance (Core Web Vitals)

Scenarios prioritaires bas√©s sur l'architecture d√©tect√©e.
Code Playwright complet avec page objects.
`;

    try {
      const testsCode = await this.claudeAPI.generateWithCache(
        'e2e-tests-main',
        e2ePrompt,
        'Tu g√©n√®res des tests E2E Playwright complets pour des applications web'
      );

      const testFilePath = path.join(this.testsDir, 'e2e', 'main.spec.ts');
      this.ensureDirectoryExists(path.dirname(testFilePath));
      fs.writeFileSync(testFilePath, testsCode);

      return [{
        type: 'e2e',
        scenario: 'main-user-journeys',
        file: testFilePath,
        description: 'Tests E2E parcours utilisateur principaux',
        generated: true
      }];

    } catch (error) {
      console.warn('    ‚ö†Ô∏è Erreur g√©n√©ration tests E2E:', error.message);
      return [];
    }
  }

  async generatePerformanceTests(codeAnalysis) {
    const perfTestPrompt = `
G√©n√®re des tests de performance pour cette application :

COMPOSANTS: ${codeAnalysis.components.length}
ROUTES API: ${codeAnalysis.apiRoutes.length}
COMPLEXIT√â: ${codeAnalysis.complexity.cyclomatic}

Configuration tests performance :
1. Tests temps de rendu composants (< 100ms)
2. Tests charge API (concurrent requests)
3. Tests bundle size (< 500KB)
4. Tests memory leaks
5. Tests Core Web Vitals
6. Benchmarks performance

Code avec outils : Jest, Lighthouse CI, Bundle Analyzer.
`;

    try {
      const testsCode = await this.claudeAPI.generateWithCache(
        'performance-tests',
        perfTestPrompt,
        'Tu g√©n√®res des tests de performance complets pour applications web'
      );

      const testFilePath = path.join(this.testsDir, 'performance', 'performance.test.ts');
      this.ensureDirectoryExists(path.dirname(testFilePath));
      fs.writeFileSync(testFilePath, testsCode);

      return [{
        type: 'performance',
        focus: 'comprehensive',
        file: testFilePath,
        description: 'Tests performance application',
        generated: true
      }];

    } catch (error) {
      console.warn('    ‚ö†Ô∏è Erreur g√©n√©ration tests performance:', error.message);
      return [];
    }
  }

  /**
   * üìä RAPPORT TESTING FINAL
   */
  generateTestingReport(results) {
    const duration = Date.now() - this.testMetrics.startTime;
    const successRate = this.testMetrics.testsExecuted > 0 
      ? (this.testMetrics.testsPassed / this.testMetrics.testsExecuted * 100) 
      : 0;

    console.log('\nüìä RAPPORT INTELLIGENT TESTER');
    console.log('=====================================');
    console.log(`‚è±Ô∏è  Dur√©e: ${Math.round(duration / 1000)}s`);
    console.log(`üß™ Tests g√©n√©r√©s: ${this.testMetrics.testsGenerated}`);
    console.log(`üèÉ Tests ex√©cut√©s: ${this.testMetrics.testsExecuted}`);
    console.log(`‚úÖ Tests r√©ussis: ${this.testMetrics.testsPassed}`);
    console.log(`‚ùå Tests √©chou√©s: ${this.testMetrics.testsFailed}`);
    console.log(`üìà Taux de succ√®s: ${successRate.toFixed(1)}%`);
    console.log(`üìä Coverage: ${this.testMetrics.coverage.toFixed(1)}%`);
    console.log(`üîç Edge cases d√©tect√©s: ${this.testMetrics.edgeCasesFound}`);
    console.log(`‚ö° Probl√®mes performance: ${this.testMetrics.performanceIssues}`);

    // D√©tail par type de test
    console.log('\nüìã TESTS PAR CAT√âGORIE:');
    Object.entries(results.generatedTests).forEach(([type, tests]) => {
      if (tests.length > 0) {
        console.log(`   ${this.testTypes[type]}: ${tests.length} tests`);
      }
    });

    // Coverage d√©taill√©
    if (results.coverageAnalysis.summary) {
      const cov = results.coverageAnalysis.summary;
      console.log('\nüìä COVERAGE D√âTAILL√â:');
      console.log(`   Statements: ${cov.statements.percentage.toFixed(1)}% (${cov.statements.covered}/${cov.statements.total})`);
      console.log(`   Functions: ${cov.functions.percentage.toFixed(1)}% (${cov.functions.covered}/${cov.functions.total})`);
      console.log(`   Branches: ${cov.branches.percentage.toFixed(1)}% (${cov.branches.covered}/${cov.branches.total})`);
      console.log(`   Lines: ${cov.lines.percentage.toFixed(1)}% (${cov.lines.covered}/${cov.lines.total})`);
    }

    // Edge cases critiques
    if (results.edgeCases.cases && results.edgeCases.cases.length > 0) {
      const criticalCases = results.edgeCases.cases.filter(c => c.priority === 'Critical');
      if (criticalCases.length > 0) {
        console.log('\nüö® EDGE CASES CRITIQUES:');
        criticalCases.slice(0, 5).forEach(edge => {
          console.log(`   ‚Ä¢ ${edge.description}`);
        });
      }
    }

    // Probl√®mes performance
    if (results.performanceTests.length > 0) {
      const issues = results.performanceTests.filter(t => t.status === 'warning' || t.status === 'error');
      if (issues.length > 0) {
        console.log('\n‚ö° PROBL√àMES PERFORMANCE:');
        issues.slice(0, 5).forEach(issue => {
          console.log(`   ‚ö†Ô∏è ${issue.description || issue.name}`);
        });
      }
    }

    // Recommandations d'am√©lioration
    console.log('\nüí° RECOMMANDATIONS:');
    
    if (this.testMetrics.coverage < 80) {
      console.log(`   üìà Am√©liorer coverage (objectif: 80%, actuel: ${this.testMetrics.coverage.toFixed(1)}%)`);
    }
    
    if (this.testMetrics.testsFailed > 0) {
      console.log(`   üîß Corriger ${this.testMetrics.testsFailed} tests en √©chec`);
    }
    
    if (results.edgeCases.cases && results.edgeCases.cases.length > 5) {
      console.log(`   üîç Traiter ${results.edgeCases.cases.length} edge cases d√©tect√©s`);
    }
    
    if (this.testMetrics.performanceIssues > 0) {
      console.log(`   ‚ö° R√©soudre ${this.testMetrics.performanceIssues} probl√®mes performance`);
    }

    // Next steps
    console.log('\nüöÄ PROCHAINES √âTAPES:');
    console.log('   1. Corriger tests en √©chec');
    console.log('   2. Am√©liorer coverage zones critiques');
    console.log('   3. Impl√©menter tests edge cases prioritaires');
    console.log('   4. Optimiser performance selon tests');
    console.log('   5. Automatiser ex√©cution dans CI/CD');

    // Configuration CI/CD
    console.log('\nüîÑ INT√âGRATION CI/CD:');
    console.log('   ‚Ä¢ Tests unitaires: √Ä chaque commit');
    console.log('   ‚Ä¢ Tests int√©gration: √Ä chaque PR');
    console.log('   ‚Ä¢ Tests E2E: Avant d√©ploiement');
    console.log('   ‚Ä¢ Tests performance: Hebdomadaire');

    console.log('\n‚úÖ INTELLIGENT TESTER TERMIN√â !');

    // Sauvegarde rapport
    this.saveTestingReport(results);
  }

  /**
   * üíæ SAUVEGARDE RAPPORT TESTING
   */
  saveTestingReport(results) {
    try {
      const memoryPath = path.join(this.projectRoot, 'data', 'ai-memory');
      if (!fs.existsSync(memoryPath)) {
        fs.mkdirSync(memoryPath, { recursive: true });
      }
      
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const reportFile = path.join(memoryPath, `testing-report-${timestamp}.json`);
      
      const report = {
        timestamp: Date.now(),
        metrics: this.testMetrics,
        results: results,
        recommendations: this.generateTestingRecommendations(results),
        cicd: this.generateCICDConfig()
      };
      
      fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
      console.log(`üíæ Rapport testing sauvegard√©: ${reportFile}`);
      
      // G√©n√©ration rapport HTML
      this.generateTestingReportHTML(report, reportFile.replace('.json', '.html'));
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur sauvegarde rapport: ${error.message}`);
    }
  }

  generateTestingRecommendations(results) {
    const recommendations = [];
    
    // Recommandations coverage
    if (this.testMetrics.coverage < 80) {
      recommendations.push({
        category: 'Coverage',
        priority: 'High',
        action: `Am√©liorer coverage de ${this.testMetrics.coverage.toFixed(1)}% √† 80%`,
        impact: 'R√©duction bugs en production',
        effort: 'Medium'
      });
    }
    
    // Recommandations edge cases
    if (this.testMetrics.edgeCasesFound > 10) {
      recommendations.push({
        category: 'Edge Cases',
        priority: 'Medium',
        action: `Impl√©menter tests pour ${this.testMetrics.edgeCasesFound} edge cases`,
        impact: 'Robustesse application',
        effort: 'High'
      });
    }
    
    // Recommandations performance
    if (this.testMetrics.performanceIssues > 0) {
      recommendations.push({
        category: 'Performance',
        priority: 'Medium',
        action: `Optimiser ${this.testMetrics.performanceIssues} probl√®mes performance`,
        impact: 'Exp√©rience utilisateur',
        effort: 'Medium'
      });
    }
    
    return recommendations;
  }

  generateCICDConfig() {
    return {
      githubActions: {
        testWorkflow: 'Ex√©cution tests sur PR et push',
        coverageReporting: 'Upload coverage vers Codecov',
        e2eScheduled: 'Tests E2E nightly'
      },
      testScripts: {
        'test': 'jest',
        'test:watch': 'jest --watch',
        'test:coverage': 'jest --coverage',
        'test:e2e': 'playwright test',
        'test:performance': 'lighthouse CI'
      }
    };
  }

  generateTestingReportHTML(report, outputPath) {
    const successRate = report.metrics.testsExecuted > 0 
      ? (report.metrics.testsPassed / report.metrics.testsExecuted * 100) 
      : 0;

    const htmlTemplate = `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport Testing - ${new Date().toLocaleDateString()}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 30px; }
        .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
        .metric { background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; }
        .metric-value { font-size: 24px; font-weight: bold; color: #333; }
        .metric-label { color: #666; font-size: 14px; }
        .success-rate { font-size: 48px; font-weight: bold; color: ${successRate >= 90 ? '#28a745' : successRate >= 70 ? '#ffc107' : '#dc3545'}; }
        .coverage-bar { width: 100%; height: 20px; background: #e9ecef; border-radius: 10px; overflow: hidden; }
        .coverage-fill { height: 100%; background: ${report.metrics.coverage >= 80 ? '#28a745' : report.metrics.coverage >= 60 ? '#ffc107' : '#dc3545'}; width: ${report.metrics.coverage}%; }
        .recommendation { background: #e3f2fd; padding: 15px; margin: 10px 0; border-left: 4px solid #2196f3; border-radius: 4px; }
        .priority-high { border-left-color: #dc3545; background: #ffeaea; }
        .section { margin: 30px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß™ Rapport Intelligent Tester</h1>
            <div class="success-rate">${successRate.toFixed(1)}%</div>
            <p>Taux de succ√®s des tests</p>
            <p>G√©n√©r√© le ${new Date(report.timestamp).toLocaleString()}</p>
        </div>
        
        <div class="metrics">
            <div class="metric">
                <div class="metric-value">${report.metrics.testsGenerated}</div>
                <div class="metric-label">Tests g√©n√©r√©s</div>
            </div>
            <div class="metric">
                <div class="metric-value">${report.metrics.testsExecuted}</div>
                <div class="metric-label">Tests ex√©cut√©s</div>
            </div>
            <div class="metric">
                <div class="metric-value">${report.metrics.testsPassed}</div>
                <div class="metric-label">Tests r√©ussis</div>
            </div>
            <div class="metric">
                <div class="metric-value">${report.metrics.edgeCasesFound}</div>
                <div class="metric-label">Edge cases d√©tect√©s</div>
            </div>
        </div>
        
        <div class="section">
            <h2>üìä Coverage</h2>
            <div class="coverage-bar">
                <div class="coverage-fill"></div>
            </div>
            <p>${report.metrics.coverage.toFixed(1)}% de couverture de code</p>
        </div>
        
        <div class="section">
            <h2>üí° Recommandations</h2>
            ${report.recommendations.map(rec => `
                <div class="recommendation ${rec.priority === 'High' ? 'priority-high' : ''}">
                    <strong>${rec.action}</strong><br>
                    <small>Cat√©gorie: ${rec.category} | Priorit√©: ${rec.priority} | Impact: ${rec.impact}</small>
                </div>
            `).join('')}
        </div>
        
        <div class="section">
            <h2>üîÑ Configuration CI/CD</h2>
            <pre>${JSON.stringify(report.cicd, null, 2)}</pre>
        </div>
    </div>
</body>
</html>`;
    
    fs.writeFileSync(outputPath, htmlTemplate);
    console.log(`üìÑ Rapport HTML testing g√©n√©r√©: ${outputPath}`);
  }
}

/**
 * üöÄ EX√âCUTION SI SCRIPT DIRECT
 */
if (require.main === module) {
  const intelligentTester = new IntelligentTester();
  
  intelligentTester.intelligentTesting()
    .then(success => {
      if (success) {
        console.log('\nüéâ TESTING INTELLIGENT R√âUSSI !');
        
        // Communication avec build-server
        process.stdout.write(JSON.stringify({
          success: true,
          testsGenerated: intelligentTester.testMetrics.testsGenerated,
          testsExecuted: intelligentTester.testMetrics.testsExecuted,
          coverage: intelligentTester.testMetrics.coverage,
          successRate: intelligentTester.testMetrics.testsExecuted > 0 
            ? (intelligentTester.testMetrics.testsPassed / intelligentTester.testMetrics.testsExecuted * 100) 
            : 0
        }));
        
        process.exit(0);
      } else {
        console.log('\n‚ùå TESTING INTELLIGENT √âCHOU√â');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('\nüí• ERREUR CRITIQUE INTELLIGENT TESTER:', error.message);
      process.exit(1);
    });
}

module.exports = { IntelligentTester };