const { execSync } = require('child_process');

function run(cmd, desc) {
  console.log(`\nüîß ${desc}...`);
  try {
    execSync(cmd, { stdio: 'inherit' });
    console.log(`‚úÖ ${desc} termin√©.`);
  } catch (err) {
    console.error(`‚ùå Erreur pendant : ${desc}`);
    process.exit(1);
  }
}

function killPortIfOccupied(port) {
  try {
    const pid = execSync(`lsof -t -i:${port} || true`).toString().trim();
    if (pid) {
      console.log(`\n‚ùó Le port ${port} est d√©j√† utilis√© (PID: ${pid}), arr√™t du processus...`);
      execSync(`kill -9 ${pid}`);
      console.log(`‚úÖ Processus ${pid} stopp√©.`);
    } else {
      console.log(`‚úÖ Port ${port} libre.`);
    }
  } catch (err) {
    console.error(`‚ùå Erreur lors de la v√©rification du port ${port}:`, err.message);
  }
}

console.log('üöÄ D√©marrage du process de build complet Orderspot.pro');

// 0. S√©curit√© : lib√©ration du port 3000
killPortIfOccupied(3000);

// 1 ‚Üí 12 : Workflow R&D complet
run('node tools/generatePrismaSchema.js', '1. G√©n√©ration du schema.prisma');
run('npx prisma generate', '2. G√©n√©ration du client Prisma');
run('npx prisma migrate dev --name auto', '3. Migration de la base de donn√©es');
run('node tools/generatePrismaServiceFromData.js', '4. G√©n√©ration des fonctions Prisma (getXxxById)');
run('node tools/cleanDataFile.js', '5. Nettoyage du fichier data.ts (suppression des doublons)');
run('node tools/fixApiCustomImports.js', '6. Correction des imports dans les routes API');
run('node tools/patchNextConfigRedirects.js', '7. Patch next.config.ts pour ignorer prerender API');
run('node tools/fixApiFolder.js', '8. Fix API routes (d√©placement api-custom ‚Üí app)');
run('npm run build', '9. Build final de l‚Äôapplication');
run('pm2 start npm --name orderspot-app -- start', '10. D√©marrage de l‚Äôapp avec PM2');
run('pm2 save', '11. Sauvegarde de la configuration PM2');
run('pm2 startup', '12. Configuration du red√©marrage automatique');

console.log('\nüéâ Build complet termin√© avec succ√®s !');
