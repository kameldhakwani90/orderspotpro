const { execSync } = require("child_process");
const fs = require('fs');
const path = require('path');

function run(cmd, desc) {
  console.log("\nüîß " + desc + "...");
  try {
    const DATABASE_URL = process.env.DATABASE_URL || `postgresql://orderspot_user:orderspot_pass@orderspot_postgres:5432/orderspot_db?schema=public`;
    const env = { ...process.env, DATABASE_URL };
    execSync(cmd, { stdio: "inherit", env });
    console.log("‚úÖ " + desc + " termin√©.");
  } catch (err) {
    console.error("‚ùå Erreur pendant : " + desc);
    console.error("Command:", cmd);
    console.error("DATABASE_URL:", process.env.DATABASE_URL);
    process.exit(1);
  }
}

function setupDatabaseConnection() {
  console.log("\nüîç Configuration de la connexion base de donn√©es...");

  const DB_HOST = "orderspot_postgres";
  const DB_USER = "orderspot_user";
  const DB_PASS = "orderspot_pass";
  const DB_NAME = "orderspot_db";
  const DB_PORT = "5432";

  const DATABASE_URL = `postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=public`;
  process.env.DATABASE_URL = DATABASE_URL;

  console.log("üîó DATABASE_URL configur√©e:", DATABASE_URL);
  
  try {
    execSync(`echo 'export DATABASE_URL="${DATABASE_URL}"' >> ~/.bashrc`, { stdio: "pipe" });
  } catch (err) {
    // Ignore l'erreur si le fichier .bashrc n'existe pas ou n'est pas accessible
  }

  try {
    execSync(`DATABASE_URL="${DATABASE_URL}" npx prisma db pull --force`, { stdio: "pipe" });
    console.log("‚úÖ Base de donn√©es accessible");
    return true;
  } catch {
    console.log("‚ùå Connexion √©chou√©e - tentative de correction r√©seau...");

    try {
      execSync("docker network create orderspot-network 2>/dev/null || true", { stdio: "pipe" });
      execSync("docker network connect orderspot-network orderspot_postgres 2>/dev/null || true", { stdio: "pipe" });
      execSync("docker network connect orderspot-network orderspot-app 2>/dev/null || true", { stdio: "pipe" });
      console.log("üîó R√©seau Docker configur√©");
      execSync(`DATABASE_URL="${DATABASE_URL}" npx prisma db pull --force`, { stdio: "pipe" });
      console.log("‚úÖ Connexion DB r√©tablie");
      return true;
    } catch {
      console.log("‚ö†Ô∏è  PostgreSQL pas encore accessible - on continue quand m√™me");
      return false;
    }
  }
}

function stopPM2App(appName) {
  try {
    console.log("\nüõë Arr√™t de l'application PM2: " + appName + "...");
    execSync("pm2 delete " + appName, { stdio: "pipe" });
    console.log("‚úÖ Application " + appName + " stopp√©e.");
  } catch {
    console.log("‚Ñπ Application " + appName + " non trouv√©e ou d√©j√† arr√™t√©e.");
  }
  execSync("sleep 2");
}

function validateGeneratedFiles() {
  console.log("\nüîç Validation des fichiers g√©n√©r√©s...");
  
  const criticalFiles = [
    'prisma/schema.prisma',
    'src/lib/prisma-service.ts',
    'src/app/api/users/route.ts',
    'src/app/api/auth/route.ts',
    'src/context/AuthContext.tsx'
  ];
  
  let allPresent = true;
  
  criticalFiles.forEach(file => {
    const fullPath = path.join(__dirname, '..', file);
    if (fs.existsSync(fullPath)) {
      console.log(`‚úÖ ${file}`);
    } else {
      console.error(`‚ùå Fichier critique manquant: ${file}`);
      allPresent = false;
    }
  });
  
  if (!allPresent) {
    console.error("‚ùå Certains fichiers critiques sont manquants");
    console.error("üí° V√©rifiez que la g√©n√©ration s'est ex√©cut√©e correctement");
    process.exit(1);
  }
  
  console.log("‚úÖ Tous les fichiers critiques sont pr√©sents");
}

function installDependencies() {
  console.log("\nüì¶ Installation d√©pendances avec versions compatibles...");
  
  // Forcer version lucide-react compatible
  console.log("üîß Installation lucide-react version compatible...");
  run('npm install lucide-react@0.263.1 --save', "Installation lucide-react compatible");
  
  // Installation avec legacy-peer-deps pour √©viter les conflits
  console.log("üì¶ Installation avec --legacy-peer-deps...");
  run('npm install --legacy-peer-deps', "Installation NPM (mode compatibilit√©)");
}

function createAntiBarrelNextConfig() {
  console.log("\nüîß Cr√©ation next.config.js ANTI-BARREL...");
  
  const configPath = path.join(__dirname, '../next.config.js');
  
  const bulletproofConfig = `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  
  // D√âSACTIVATION COMPL√àTE de l'optimisation barrel
  experimental: {
    optimizePackageImports: false // FALSE, pas []
  },
  
  // Configuration webpack ANTI-BARREL
  webpack: (config, { isServer }) => {
    // Forcer r√©solution directe lucide-react
    config.resolve.alias = {
      ...config.resolve.alias,
      'lucide-react': require.resolve('lucide-react')
    };
    
    // Ignorer warnings barrel
    config.ignoreWarnings = [
      ...(config.ignoreWarnings || []),
      { module: /__barrel_optimize__/ },
      { module: /lucide-react/ }
    ];
    
    // D√©sactiver transformations SWC sur lucide
    config.module.rules.push({
      test: /node_modules\\/lucide-react/,
      type: 'javascript/auto'
    });
    
    return config;
  },
  
  // TypeScript permissif pour √©viter erreurs
  typescript: {
    ignoreBuildErrors: false
  }
}

module.exports = nextConfig`;

  fs.writeFileSync(configPath, bulletproofConfig);
  console.log("‚úÖ next.config.js ANTI-BARREL cr√©√©");
}

function fixLucidePostGeneration() {
  console.log("\nüîß CORRECTION MASSIVE post-g√©n√©ration...");
  
  // M√©thode 1: sed sur tous les fichiers
  try {
    console.log("üìù Correction avec sed...");
    execSync(`find ./src -name "*.tsx" -o -name "*.ts" | xargs sed -i 's/__barrel_optimize__[^"]*!=!lucide-react/lucide-react/g'`, { stdio: "inherit" });
    console.log("‚úÖ Correction sed termin√©e");
  } catch (error) {
    console.log("‚ö†Ô∏è  sed √©chou√©, tentative perl...");
  }
  
  // M√©thode 2: perl en backup
  try {
    console.log("üìù Correction avec perl...");
    execSync(`find ./src -name "*.tsx" -o -name "*.ts" | xargs perl -i -pe 's/"__barrel_optimize__[^"]+"/\"lucide-react\"/g'`, { stdio: "inherit" });
    console.log("‚úÖ Correction perl termin√©e");
  } catch (error) {
    console.log("‚ö†Ô∏è  perl √©chou√©, correction manuelle...");
  }
  
  // M√©thode 3: Correction Node.js manuelle
  console.log("üìù Correction Node.js finale...");
  const srcDir = path.join(__dirname, '../src');
  
  function fixDirectory(dir) {
    if (!fs.existsSync(dir)) return;
    
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    entries.forEach(entry => {
      const fullPath = path.join(dir, entry.name);
      
      if (entry.isDirectory() && !['node_modules', '.git', '.next'].includes(entry.name)) {
        fixDirectory(fullPath);
      } else if (entry.isFile() && /\.(tsx?|jsx?)$/.test(entry.name)) {
        try {
          let content = fs.readFileSync(fullPath, 'utf-8');
          
          if (content.includes('__barrel_optimize__')) {
            const originalContent = content;
            
            // Pattern complet
            content = content.replace(
              /"__barrel_optimize__\?names=[^"]+!=!lucide-react"/g,
              '"lucide-react"'
            );
            
            // Pattern avec quotes simples
            content = content.replace(
              /'__barrel_optimize__\?names=[^']+!=!lucide-react'/g,
              "'lucide-react'"
            );
            
            if (content !== originalContent) {
              fs.writeFileSync(fullPath, content, 'utf-8');
              console.log(`  ‚úÖ Corrig√©: ${path.relative(srcDir, fullPath)}`);
            }
          }
        } catch (error) {
          console.log(`  ‚ö†Ô∏è  Erreur ${entry.name}: ${error.message}`);
        }
      }
    });
  }
  
  fixDirectory(srcDir);
  console.log("‚úÖ Correction massive termin√©e");
  
  // V√©rification finale
  try {
    const checkResult = execSync(`grep -r "__barrel_optimize__" ./src --include="*.tsx" --include="*.ts" || echo "CLEAN"`, { encoding: 'utf-8' });
    if (checkResult.trim() === 'CLEAN') {
      console.log("üéâ SUCC√àS: Aucun __barrel_optimize__ restant !");
    } else {
      console.log("‚ö†Ô∏è  Quelques __barrel_optimize__ persistent...");
      console.log(checkResult);
    }
  } catch (error) {
    console.log("‚úÖ V√©rification impossible mais correction appliqu√©e");
  }
}

// ====================================
// FONCTIONS D'EX√âCUTION DES SCRIPTS
// ====================================

function runScript(scriptName, description, required = true) {
  const scriptPath = path.join(__dirname, scriptName);
  
  if (!fs.existsSync(scriptPath)) {
    if (required) {
      console.error(`‚ùå Script requis manquant: ${scriptName}`);
      process.exit(1);
    } else {
      console.log(`‚è≠Ô∏è  Script optionnel manquant: ${scriptName}`);
      return false;
    }
  }
  
  try {
    run(`node "${scriptPath}"`, description);
    return true;
  } catch (error) {
    if (required) {
      console.error(`‚ùå √âchec script requis: ${scriptName}`);
      process.exit(1);
    } else {
      console.log(`‚ö†Ô∏è  √âchec script optionnel: ${scriptName}`);
      return false;
    }
  }
}

// ====================================
// PIPELINE PRINCIPAL AVEC ORDRE LOGIQUE INTELLIGENT
// ====================================

console.log("üöÄ D√©marrage du pipeline Orderspot.pro - PIPELINE INTELLIGENT V5");

try {
  // ====================================
  // PHASE 0 ‚Äî PR√âPARATION ET D√âTECTION
  // ====================================
  console.log("\n" + "=".repeat(60));
  console.log("üìã PHASE 0: PR√âPARATION ET D√âTECTION INTELLIGENTE");
  console.log("=".repeat(60));
  
  stopPM2App("orderspot-app");
  installDependencies();
  createAntiBarrelNextConfig();
  
  // NOUVEAU: D√©tection des changements Firebase
  console.log("\nüîç D√©tection des changements Firebase...");
  const detectionResult = runScript('detectFirebaseChanges.js', 'D√©tection changements Firebase', false);
  
  if (detectionResult) {
    console.log("‚úÖ Changements Firebase d√©tect√©s - r√©g√©n√©ration n√©cessaire");
  } else {
    console.log("‚è≠Ô∏è  Aucun changement d√©tect√© - r√©g√©n√©ration pr√©ventive");
  }
  
  // NOUVEAU: Sauvegarde des customisations AVANT r√©g√©n√©ration
  console.log("\nüíæ Sauvegarde des customisations...");
  runScript('preserveCustomizations.js', 'Sauvegarde customisations', false);

  // ====================================
  // PHASE 1 ‚Äî G√âN√âRATION CORE (ORDRE CRITIQUE)
  // ====================================
  console.log("\n" + "=".repeat(60));
  console.log("üèóÔ∏è  PHASE 1: G√âN√âRATION CORE - ORDRE LOGIQUE");
  console.log("=".repeat(60));
  
  // 1.1: TYPES ET DONN√âES (BASE) - NE DOIT JAMAIS √äTRE √âCRAS√â
  console.log("\nüìä 1.1: Validation des types et donn√©es de base...");
  const typesPath = path.join(__dirname, '../src/lib/types.ts');
  const dataPath = path.join(__dirname, '../src/lib/data.ts');
  
  if (!fs.existsSync(typesPath) || !fs.existsSync(dataPath)) {
    console.error("‚ùå Fichiers de base manquants (types.ts ou data.ts)");
    console.error("üí° Ces fichiers doivent exister AVANT la g√©n√©ration");
    process.exit(1);
  }
  
  console.log("‚úÖ Fichiers de base pr√©sents");
  
  // 1.2: SCHEMA PRISMA (D√âPEND DES TYPES)
  console.log("\nüóÑÔ∏è  1.2: G√©n√©ration schema Prisma depuis types...");
  runScript('generatePrismaSchema.js', 'G√©n√©ration schema Prisma AM√âLIOR√â');
  
  // 1.3: SERVICE PRISMA (D√âPEND DU SCHEMA)
  console.log("\n‚öôÔ∏è  1.3: G√©n√©ration service Prisma depuis types...");
  runScript('generatePrismaServiceFromData.js', 'G√©n√©ration service Prisma CRUD COMPLET');

  // ====================================
  // PHASE 2 ‚Äî G√âN√âRATION API (D√âPEND DU SERVICE)
  // ====================================
  console.log("\n" + "=".repeat(60));
  console.log("üîó PHASE 2: G√âN√âRATION API - D√âPEND DU SERVICE PRISMA");
  console.log("=".repeat(60));
  
  // 2.1: ROUTES API (D√âPEND DU SERVICE PRISMA)
  console.log("\nüì° 2.1: G√©n√©ration routes API depuis mod√®les...");
  runScript('generateApiRoutes.js', 'G√©n√©ration routes API AM√âLIOR√âES');
  
  // 2.2: FIX API FOLDER (D√âPEND DES ROUTES G√âN√âR√âES)
  console.log("\nüîß 2.2: Fix et validation structure API...");
  runScript('fixApiFolder.js', 'Fix structure API INTELLIGENT');
  
  // 2.3: SYST√àME AUTH AUTOMATIQUE (D√âPEND DES ROUTES API)
  console.log("\nüîê 2.3: G√©n√©ration syst√®me authentification...");
  runScript('generateAuthSystem.js', 'G√©n√©ration syst√®me auth INTELLIGENT');

  // ====================================
  // PHASE 3 ‚Äî CONFIGURATION PRISMA ET BASE DE DONN√âES
  // ====================================
  console.log("\n" + "=".repeat(60));
  console.log("üóÑÔ∏è  PHASE 3: CONFIGURATION BASE DE DONN√âES - APR√àS G√âN√âRATION");
  console.log("=".repeat(60));
  
  const dbConnected = setupDatabaseConnection();
  
  if (dbConnected) {
    console.log("\nüîÑ Base de donn√©es accessible - g√©n√©ration client et push...");
    run("npx prisma generate", "G√©n√©ration client Prisma");
    run("npx prisma db push --force-reset", "Push schema DB Prisma");
  } else {
    console.log("\n‚ö†Ô∏è  Base de donn√©es non accessible - g√©n√©ration client seulement...");
    run("npx prisma generate", "G√©n√©ration client Prisma");
  }

  // ====================================
  // PHASE 4 ‚Äî G√âN√âRATION FRONTEND (D√âPEND DE L'API)
  // ====================================
  console.log("\n" + "=".repeat(60));
  console.log("‚öõÔ∏è  PHASE 4: G√âN√âRATION FRONTEND - D√âPEND DE L'API");
  console.log("=".repeat(60));
  
  // 4.1: HOOKS REACT (D√âPEND DES ROUTES API)
  console.log("\nü™ù 4.1: G√©n√©ration hooks React depuis API...");
  runScript('generateReactHooks.js', 'G√©n√©ration hooks React DYNAMIQUES');
  
  // 4.2: MIGRATION COMPOSANTS (D√âPEND DES HOOKS)
  console.log("\nüîÑ 4.2: Migration composants vers hooks...");
  runScript('migrateComponentsToHooks.js', 'Migration composants vers hooks');
  
  // 4.3: MIGRATION DATA (D√âPEND DU SERVICE PRISMA)
  console.log("\nüì¶ 4.3: Migration imports data vers prisma-service...");
  runScript('migrateDataToPrisma.js', 'Migration imports data vers prisma-service');

  // ====================================
  // PHASE 5 ‚Äî CORRECTIONS ET OPTIMISATIONS
  // ====================================
  console.log("\n" + "=".repeat(60));
  console.log("üîß PHASE 5: CORRECTIONS - APR√àS TOUTE LA G√âN√âRATION");
  console.log("=".repeat(60));
  
  // 5.1: CORRECTIONS EXPORTS (D√âPEND DE TOUS LES FICHIERS G√âN√âR√âS)
  console.log("\nüîó 5.1: Correction exports manquants...");
  runScript('genericMissingExportsFixer.js', 'Correction exports manquants');
  
  // 5.2: SYNCHRONISATION TYPES/SCHEMA (D√âPEND DU SCHEMA FINAL)
  console.log("\n‚öôÔ∏è  5.2: Synchronisation Types/Schema...");
  runScript('fixTypesMismatch.js', 'Synchronisation Types/Schema');
  
  // 5.3: IMPORTS TYPES (D√âPEND DES CORRECTIONS PR√âC√âDENTES)
  console.log("\nüì• 5.3: Correction imports types...");
  runScript('fixMissingTypesImports.js', 'Correction imports types manquants');

  // ====================================
  // PHASE 6 ‚Äî CORRECTIONS POST-G√âN√âRATION (CRITIQUE)
  // ====================================
  console.log("\n" + "=".repeat(60));
  console.log("üö® PHASE 6: CORRECTIONS POST-G√âN√âRATION - √âTAPE CRITIQUE");
  console.log("=".repeat(60));
  
  // 6.1: CORRECTION LUCIDE (DOIT √äTRE APR√àS TOUTE LA G√âN√âRATION)
  fixLucidePostGeneration();
  
  // 6.2: R√âSOLUTION FINALE DES ERREURS
  console.log("\nüîß 6.2: R√©solution finale des erreurs...");
  runScript('dynamicErrorResolver.js', 'R√©solution finale des erreurs');

  // ====================================
  // PHASE 7 ‚Äî RESTAURATION CUSTOMISATIONS
  // ====================================
  console.log("\n" + "=".repeat(60));
  console.log("üíæ PHASE 7: RESTAURATION INTELLIGENTE DES CUSTOMISATIONS");
  console.log("=".repeat(60));
  
  // 7.1: RESTAURATION DES CUSTOMISATIONS (APR√àS TOUTE LA G√âN√âRATION)
  console.log("\nüîÑ 7.1: Restauration des customisations...");
  const restoreResult = runScript('preserveCustomizations.js', 'Restauration customisations', false);
  
  if (restoreResult) {
    console.log("‚úÖ Customisations restaur√©es avec succ√®s");
  } else {
    console.log("‚è≠Ô∏è  Aucune customisation √† restaurer");
  }

  // ====================================
  // PHASE 8 ‚Äî VALIDATION FINALE
  // ====================================
  console.log("\n" + "=".repeat(60));
  console.log("‚úÖ PHASE 8: VALIDATION FINALE - V√âRIFICATION COMPL√àTE");
  console.log("=".repeat(60));
  
  validateGeneratedFiles();

  // ====================================
  // PHASE 9 ‚Äî BUILD ET D√âMARRAGE
  // ====================================
  console.log("\n" + "=".repeat(60));
  console.log("üöÄ PHASE 9: BUILD ET D√âMARRAGE FINAL");
  console.log("=".repeat(60));
  
  console.log("\nüì¶ 9.1: Build Next.js final...");
  run("npm run build", "Build Next.js final");
  
  console.log("\nüöÄ 9.2: D√©marrage application...");
  run("pm2 start npm --name orderspot-app -- start", "D√©marrage PM2 app");
  run("pm2 save", "Sauvegarde configuration PM2");

  // ====================================
  // RAPPORT FINAL D√âTAILL√â
  // ====================================
  console.log("\n" + "=".repeat(60));
  console.log("üéâ BUILD PIPELINE INTELLIGENT TERMIN√â AVEC SUCC√àS !");
  console.log("=".repeat(60));
  console.log("üåê Application op√©rationnelle sur le port 3001");
  console.log("üìä Syst√®me 100% g√©n√©r√© dynamiquement depuis types.ts");
  
  console.log("\nüìã PIPELINE EX√âCUT√â DANS L'ORDRE LOGIQUE:");
  console.log("‚úÖ Phase 0: Pr√©paration + D√©tection Firebase");
  console.log("‚úÖ Phase 1: G√©n√©ration Core (types ‚Üí schema ‚Üí service)");
  console.log("‚úÖ Phase 2: G√©n√©ration API (service ‚Üí routes ‚Üí auth)");
  console.log("‚úÖ Phase 3: Configuration DB (apr√®s g√©n√©ration)");
  console.log("‚úÖ Phase 4: Frontend (API ‚Üí hooks ‚Üí composants)");
  console.log("‚úÖ Phase 5: Corrections (apr√®s g√©n√©ration)");
  console.log("‚úÖ Phase 6: Post-g√©n√©ration (Lucide + erreurs)");
  console.log("‚úÖ Phase 7: Restauration customisations");
  console.log("‚úÖ Phase 8: Validation finale");
  console.log("‚úÖ Phase 9: Build + D√©marrage");
  
  console.log("\nüî• NOUVELLES FONCTIONNALIT√âS V5:");
  console.log("‚úÖ D√©tection intelligente changements Firebase");
  console.log("‚úÖ Sauvegarde/restauration automatique customisations");
  console.log("‚úÖ G√©n√©ration syst√®me auth automatique");
  console.log("‚úÖ Ordre logique strict - pas d'√©crasement");
  console.log("‚úÖ Pipeline r√©silient aux erreurs");
  console.log("‚úÖ Corrections Lucide-React D√âFINITIVES");
  console.log("‚úÖ Validation compl√®te √† chaque √©tape");
  
  console.log("\nüìä FONCTIONNALIT√âS G√âN√âR√âES AUTOMATIQUEMENT:");
  console.log("‚úÖ Schema Prisma complet avec relations Firebase");
  console.log("‚úÖ Service Prisma avec CRUD pour tous les mod√®les");
  console.log("‚úÖ Routes API Next.js pour tous les mod√®les");
  console.log("‚úÖ Syst√®me d'authentification intelligent");
  console.log("‚úÖ Hooks React pour tous les mod√®les");
  console.log("‚úÖ Migration automatique des composants");
  console.log("‚úÖ Correction automatique des exports manquants");
  console.log("‚úÖ Synchronisation automatique Types/Schema");
  console.log("‚úÖ Correction automatique des imports types");
  console.log("‚úÖ Fix lucide-react post-g√©n√©ration");
  console.log("‚úÖ Configuration Next.js ANTI-BARREL");
  console.log("‚úÖ Pr√©servation intelligente des customisations");
  
  console.log("\n‚ö†Ô∏è  ORDRE LOGIQUE RESPECT√â - AUCUN √âCRASEMENT:");
  console.log("üîí Types.ts et data.ts ‚Üí JAMAIS √©cras√©s (source utilisateur)");
  console.log("üîÑ Schema ‚Üí Service ‚Üí API ‚Üí Hooks ‚Üí Composants");
  console.log("üíæ Customisations sauvegard√©es AVANT et restaur√©es APR√àS");
  console.log("üîß Corrections appliqu√©es APR√àS toute la g√©n√©ration");
  console.log("üéØ Build final SEULEMENT si tout est valid√©");
  
  if (!dbConnected) {
    console.log("\n‚ö†Ô∏è  ATTENTION: Base de donn√©es non accessible");
    console.log("üí° D√©marrez PostgreSQL et ex√©cutez:");
    console.log("   npx prisma db push");
    console.log("   pm2 restart orderspot-app");
  }
  
  console.log("\nüöÄ VOTRE APPLICATION FULL-STACK EST PR√äTE !");
  console.log("üéØ Communication frontend/backend op√©rationnelle");
  console.log("üîê Syst√®me d'authentification intelligent activ√©");
  console.log("üíæ Customisations pr√©serv√©es et restaur√©es");
  console.log("üì° API RESTful compl√®te g√©n√©r√©e automatiquement");

} catch (error) {
  console.error("\n‚ùå ERREUR CRITIQUE dans le pipeline:");
  console.error(`Message: ${error.message}`);
  console.error(`Stack: ${error.stack}`);
  
  console.log("\nüîç Diagnostic automatique...");
  console.log("üìÅ V√©rifiez que ces fichiers existent:");
  
  const criticalFiles = [
    'src/lib/types.ts',
    'src/lib/data.ts',
    'tools/detectFirebaseChanges.js',
    'tools/generatePrismaSchema.js',
    'tools/generatePrismaServiceFromData.js',
    'tools/generateApiRoutes.js',
    'tools/generateAuthSystem.js',
    'tools/generateReactHooks.js',
    'tools/migrateComponentsToHooks.js',
    'tools/migrateDataToPrisma.js',
    'tools/preserveCustomizations.js',
    'tools/genericMissingExportsFixer.js',
    'tools/fixTypesMismatch.js',
    'tools/fixMissingTypesImports.js',
    'tools/fixApiFolder.js',
    'tools/dynamicErrorResolver.js'
  ];
  
  criticalFiles.forEach(file => {
    const exists = fs.existsSync(path.join(__dirname, '..', file)) || 
                   fs.existsSync(path.join(__dirname, file));
    console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  });
  
  console.log("\nüí° PLAN DE R√âCUP√âRATION:");
  console.log("1. V√©rifiez que tous les scripts sont pr√©sents dans /tools");
  console.log("2. V√©rifiez que src/lib/types.ts existe et contient des interfaces");
  console.log("3. V√©rifiez que src/lib/data.ts existe et contient des donn√©es");
  console.log("4. Relancez le pipeline apr√®s correction");
  
  // Tentative de sauvegarde en cas d'erreur
  try {
    runScript('preserveCustomizations.js', 'Sauvegarde d\'urgence', false);
  } catch (backupError) {
    console.log("‚ö†Ô∏è  Impossible de sauvegarder les customisations");
  }
  
  process.exit(1);
}