const fs = require('fs');
const path = require('path');

console.log('üîß Configuration Next.js - D√©sactivation barrel optimization...');

const nextConfigPath = path.join(__dirname, '../next.config.js');

// Configuration qui d√©sactive l'optimisation barrel
const configContent = `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  
  // D√©sactiver l'optimisation barrel qui cause les erreurs lucide-react
  experimental: {
    optimizePackageImports: [] // Liste vide = pas d'optimisation
  },
  
  // Configuration webpack pour √©viter les probl√®mes
  webpack: (config) => {
    // Forcer la r√©solution directe de lucide-react
    config.resolve.alias = {
      ...config.resolve.alias,
      'lucide-react': require.resolve('lucide-react')
    };
    
    // Ignorer les warnings barrel
    config.ignoreWarnings = [
      ...(config.ignoreWarnings || []),
      { module: /__barrel_optimize__/ }
    ];
    
    return config;
  }
}

module.exports = nextConfig
`;

try {
  // Sauvegarder l'ancien si existe
  if (fs.existsSync(nextConfigPath)) {
    const backup = fs.readFileSync(nextConfigPath, 'utf-8');
    fs.writeFileSync(nextConfigPath + '.backup', backup);
    console.log('  üìã Sauvegarde de l\'ancien next.config.js');
  }
  
  // √âcrire la nouvelle configuration
  fs.writeFileSync(nextConfigPath, configContent);
  console.log('  ‚úÖ next.config.js cr√©√©/mis √† jour');
  
  // V√©rifier
  if (fs.existsSync(nextConfigPath)) {
    console.log('  ‚úÖ Configuration appliqu√©e avec succ√®s');
    console.log('  üéØ Barrel optimization d√©sactiv√©e');
  }
  
} catch (error) {
  console.error('‚ùå Erreur:', error.message);
  process.exit(1);
}

console.log('‚úÖ Configuration Next.js corrig√©e !');
process.exit(0);
