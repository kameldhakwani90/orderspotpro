generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // ‚Üê NOUVEAU CHAMP
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders Order[]
  
  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orderItems OrderItem[]
  
  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  total       Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  items OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float
  
  orderId   String
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model Host {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  clients      Client[]
  reservations Reservation[]
  
  @@map("hosts")
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  hostId String
  host   Host   @relation(fields: [hostId], references: [id])
  
  reservations Reservation[]
  
  @@map("clients")
}

model Reservation {
  id        String            @id @default(cuid())
  date      DateTime
  time      String
  guests    Int
  status    ReservationStatus @default(PENDING)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  
  clientId String
  client   Client @relation(fields: [clientId], references: [id])
  
  hostId String
  host   Host   @relation(fields: [hostId], references: [id])
  
  @@map("reservations")
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  categoryId String
  category   MenuCategory @relation(fields: [categoryId], references: [id])
  
  @@map("menu_items")
}

model MenuCategory {
  id           String   @id @default(cuid())
  name         String
  description  String?
  displayOrder Int
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  items MenuItem[]
  
  @@map("menu_categories")
}

model Translation {
  id        String   @id @default(cuid())
  key       String
  value     String
  language  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([key, language], name: "key_language")
  @@map("translations")
}

enum UserRole {
  USER
  ADMIN
  MANAGER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}